package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    classes.Operator var3 = new classes.Operator((-1), 10, 100);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    int var9 = var8.getScore();
    int var10 = var8.getScore();
    int var11 = var2.compareTo(var8);
    java.lang.String var12 = var8.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    classes.Gamer var2 = new classes.Gamer("", (-90));

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    classes.Ranking var0 = new classes.Ranking();
    java.lang.String var1 = var0.toString();
    java.util.List var2 = var0.getRank();
    boolean var5 = var0.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var6 = var0.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var7 = var0.getRank();
    java.util.List var8 = var0.getRank();
    java.lang.String var9 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var9.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -1", (-90));

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    classes.Operator var3 = new classes.Operator(0, 2, 2);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10");

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    classes.Operator var3 = new classes.Operator(10, 1, (-1));

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    classes.Gamer var2 = new classes.Gamer("Nome: hi!| Pontuacao: 100", 2);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    classes.Ranking var15 = var12.lerDados(var13);
    classes.Persistencia var17 = new classes.Persistencia("hi!");
    classes.Ranking var18 = new classes.Ranking();
    boolean var21 = var18.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var24 = var18.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var25 = var17.lerDados(var18);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    var17.persistirDados(var26);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var17.lerDados(var30);
    var12.persistirDados(var30);
    var1.persistirDados(var30);
    java.lang.String var35 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    java.util.List var6 = var5.getRank();
    classes.Ranking var7 = var1.lerDados(var5);
    boolean var10 = var7.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    classes.Operator var3 = new classes.Operator(10, (-90), 1);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var3 = var2.getScore();
    java.lang.String var4 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "1\u00BA -  - -1"+ "'", var4.equals("1\u00BA -  - -1"));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var5.compareTo(var10);
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    int var14 = var2.compareTo(var10);
    classes.Gamer var17 = new classes.Gamer("1\u00BA -  - -1", 10);
    int var18 = var2.compareTo(var17);
    java.lang.String var19 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var19.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    classes.Gamer var2 = new classes.Gamer("", 2);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: | Pontuacao: 2"+ "'", var3.equals("Nome: | Pontuacao: 2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: | Pontuacao: 2"+ "'", var4.equals("Nome: | Pontuacao: 2"));

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    classes.Operator var3 = new classes.Operator((-90), (-90), 1);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -1", 2);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var5.compareTo(var10);
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    int var14 = var2.compareTo(var10);
    classes.Gamer var17 = new classes.Gamer("1\u00BA -  - -1", 10);
    int var18 = var2.compareTo(var17);
    java.lang.String var19 = var17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "1\u00BA -  - -1"+ "'", var19.equals("1\u00BA -  - -1"));

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 90);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var3 = var2.getScore();
    int var4 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    java.lang.String var25 = var2.toString();
    java.lang.String var26 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    int var17 = var12.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 100);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    java.lang.String var10 = var2.getName();
    java.lang.String var11 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "1\u00BA -  - -1"+ "'", var10.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var11.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    classes.Operator var3 = new classes.Operator(100, 1, 1);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 99);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    classes.Operator var3 = new classes.Operator(90, (-1), 100);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    classes.Operator var3 = new classes.Operator((-1), 0, (-1));

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    classes.Operator var3 = new classes.Operator(99, 10, 90);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: hi!| Pontuacao: 100 - 100", 100);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - -1| Pontuacao: 100", 2);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    classes.Ranking var0 = new classes.Ranking();
    java.lang.String var1 = var0.toString();
    boolean var4 = var0.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    classes.Operator var3 = new classes.Operator(2, (-1), (-90));
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", 1);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 99);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    classes.Operator var3 = new classes.Operator(100, 11, 0);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    int var11 = var2.getScore();
    classes.Gamer var14 = new classes.Gamer("hi!", 10);
    classes.Gamer var17 = new classes.Gamer("hi!", 100);
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var17.toString();
    int var20 = var14.compareTo(var17);
    java.lang.String var21 = var17.getName();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var24.toString();
    int var27 = var24.getScore();
    java.lang.String var28 = var24.getName();
    java.lang.String var29 = var24.getName();
    classes.Gamer var32 = new classes.Gamer("hi!", 100);
    java.lang.String var33 = var32.toString();
    int var34 = var32.getScore();
    java.lang.String var35 = var32.getName();
    classes.Gamer var38 = new classes.Gamer("hi!", 100);
    java.lang.String var39 = var38.toString();
    int var40 = var38.getScore();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    int var44 = var38.compareTo(var43);
    int var45 = var32.compareTo(var38);
    int var46 = var24.compareTo(var32);
    int var47 = var24.getScore();
    int var48 = var17.compareTo(var24);
    int var49 = var2.compareTo(var24);
    int var50 = var24.getScore();
    java.lang.String var51 = var24.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var26.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    classes.Gamer var30 = new classes.Gamer("hi!", 100);
    java.lang.String var31 = var30.toString();
    int var32 = var30.getScore();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    int var36 = var30.compareTo(var35);
    java.lang.String var37 = var35.toString();
    int var38 = var14.compareTo(var35);
    classes.Gamer var41 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    java.lang.String var47 = var44.getName();
    int var48 = var41.compareTo(var44);
    int var49 = var41.getScore();
    int var50 = var14.compareTo(var41);
    int var51 = var7.compareTo(var41);
    java.lang.String var52 = var7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    int var5 = var2.getScore();
    int var6 = var2.getScore();
    java.lang.String var7 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    java.lang.String var56 = var54.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("hi!");
    classes.Ranking var58 = new classes.Ranking();
    boolean var61 = var58.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var64 = var58.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var65 = var57.lerDados(var58);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    var57.persistirDados(var66);
    classes.Ranking var70 = new classes.Ranking();
    java.util.List var71 = var70.getRank();
    classes.Ranking var72 = var57.lerDados(var70);
    classes.Ranking var73 = var1.lerDados(var70);
    classes.Persistencia var75 = new classes.Persistencia("");
    classes.Ranking var76 = new classes.Ranking();
    boolean var79 = var76.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var80 = var76.getRank();
    java.util.List var81 = var76.getRank();
    var75.persistirDados(var76);
    classes.Persistencia var84 = new classes.Persistencia("");
    classes.Ranking var85 = new classes.Ranking();
    java.util.List var86 = var85.getRank();
    var84.persistirDados(var85);
    classes.Ranking var88 = new classes.Ranking();
    var84.persistirDados(var88);
    classes.Ranking var90 = new classes.Ranking();
    java.util.List var91 = var90.getRank();
    java.lang.String var92 = var90.toString();
    var84.persistirDados(var90);
    classes.Ranking var94 = var75.lerDados(var90);
    var1.persistirDados(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.toString();
    int var8 = var2.getScore();
    java.lang.String var9 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var5.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var6 = var0.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    java.util.List var7 = var0.getRank();
    java.util.List var8 = var0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var6 = var2.getRank();
    java.util.List var7 = var2.getRank();
    var1.persistirDados(var2);
    java.util.List var9 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    classes.Gamer var30 = new classes.Gamer("hi!", 100);
    java.lang.String var31 = var30.toString();
    int var32 = var30.getScore();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    int var36 = var30.compareTo(var35);
    java.lang.String var37 = var35.toString();
    int var38 = var14.compareTo(var35);
    classes.Gamer var41 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    java.lang.String var47 = var44.getName();
    int var48 = var41.compareTo(var44);
    int var49 = var41.getScore();
    int var50 = var14.compareTo(var41);
    int var51 = var7.compareTo(var41);
    classes.Gamer var54 = new classes.Gamer("hi!", 100);
    java.lang.String var55 = var54.toString();
    int var56 = var54.getScore();
    java.lang.String var57 = var54.getName();
    classes.Gamer var60 = new classes.Gamer("hi!", 100);
    java.lang.String var61 = var60.toString();
    int var62 = var60.getScore();
    classes.Gamer var65 = new classes.Gamer("hi!", 100);
    int var66 = var60.compareTo(var65);
    int var67 = var54.compareTo(var60);
    classes.Gamer var70 = new classes.Gamer("hi!", 100);
    java.lang.String var71 = var70.toString();
    int var72 = var70.getScore();
    classes.Gamer var75 = new classes.Gamer("hi!", 100);
    int var76 = var70.compareTo(var75);
    java.lang.String var77 = var75.toString();
    int var78 = var54.compareTo(var75);
    int var79 = var41.compareTo(var54);
    classes.Gamer var82 = new classes.Gamer("hi!", 100);
    java.lang.String var83 = var82.getName();
    java.lang.String var84 = var82.toString();
    int var85 = var82.getScore();
    java.lang.String var86 = var82.getName();
    classes.Gamer var89 = new classes.Gamer("hi!", 10);
    classes.Gamer var92 = new classes.Gamer("hi!", 100);
    java.lang.String var93 = var92.getName();
    java.lang.String var94 = var92.toString();
    int var95 = var89.compareTo(var92);
    int var96 = var82.compareTo(var92);
    java.lang.String var97 = var92.toString();
    int var98 = var41.compareTo(var92);
    java.lang.String var99 = var92.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var55.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var61.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var71.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var77.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var84.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "hi!"+ "'", var93.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var94.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var97.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var99.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    classes.Gamer var2 = new classes.Gamer("hi!", (-1));
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    classes.Operator var3 = new classes.Operator(1, 10, 10);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    classes.Operator var3 = new classes.Operator(2, 2, 1089);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    classes.Gamer var27 = new classes.Gamer("1\u00BA -  - 2", 1);
    int var28 = var2.compareTo(var27);
    java.lang.String var29 = var27.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "1\u00BA -  - 2"+ "'", var29.equals("1\u00BA -  - 2"));

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - 2", 100);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var6 = var0.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    java.util.List var7 = var0.getRank();
    java.util.List var8 = var0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    java.lang.String var16 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var16.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    java.util.List var35 = var30.getRank();
    boolean var38 = var30.CheckRanking("Nome: 1\u00BA -  - 2| Pontuacao: 1", (java.lang.Integer)(-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    classes.Gamer var2 = new classes.Gamer("hi!", 10);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var5.toString();
    int var8 = var2.compareTo(var5);
    java.lang.String var9 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    classes.Operator var3 = new classes.Operator(0, 1089, 0);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var8 = var2.compareTo(var7);
    int var9 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    classes.Operator var3 = new classes.Operator(0, 2, 99);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    classes.Gamer var2 = new classes.Gamer("hi!", 90);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: hi!| Pontuacao: 100 - 100", 98);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", 99);
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100"+ "'", var3.equals("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100"));

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var5.compareTo(var10);
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    int var14 = var2.compareTo(var10);
    classes.Gamer var17 = new classes.Gamer("hi!", 100);
    java.lang.String var18 = var17.toString();
    int var19 = var2.compareTo(var17);
    int var20 = var2.getScore();
    int var21 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var18.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    java.lang.String var69 = var66.toString();
    var59.persistirDados(var66);
    classes.Ranking var71 = var57.lerDados(var66);
    boolean var74 = var66.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var77 = var66.CheckRanking("", (java.lang.Integer)10);
    java.util.List var78 = var66.getRank();
    var1.persistirDados(var66);
    java.lang.String var80 = var66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10"+ "'", var80.equals("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10"));

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var26 = new classes.Persistencia("");
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    var26.persistirDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var26.lerDados(var30);
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    java.lang.String var35 = var33.toString();
    java.lang.String var36 = var33.toString();
    var26.persistirDados(var33);
    classes.Ranking var38 = var24.lerDados(var33);
    boolean var41 = var33.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var44 = var33.CheckRanking("", (java.lang.Integer)10);
    classes.Ranking var45 = var1.lerDados(var33);
    classes.Ranking var46 = new classes.Ranking();
    boolean var49 = var46.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var52 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    java.util.List var53 = var46.getRank();
    var1.persistirDados(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - 2| Pontuacao: 1", 11);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    classes.Operator var3 = new classes.Operator(1, 10, 0);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 11);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    classes.Operator var3 = new classes.Operator(1, (-99), 11);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    boolean var22 = var12.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var23 = var12.getRank();
    var1.persistirDados(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (-2));

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    java.lang.String var28 = var25.toString();
    java.lang.String var29 = var25.toString();
    classes.Ranking var30 = var1.lerDados(var25);
    java.util.List var31 = var25.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    classes.Operator var3 = new classes.Operator(98, 98, 90);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.getName();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.toString();
    int var7 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    classes.Persistencia var1 = new classes.Persistencia("Nome: | Pontuacao: -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    var5.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    java.lang.String var27 = var21.toString();
    var5.persistirDados(var21);
    classes.Ranking var29 = var3.lerDados(var21);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    java.lang.String var35 = var32.toString();
    java.util.List var36 = var32.getRank();
    classes.Ranking var37 = var3.lerDados(var32);
    var1.persistirDados(var32);
    classes.Persistencia var40 = new classes.Persistencia("hi!");
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var48 = var40.lerDados(var41);
    classes.Ranking var49 = new classes.Ranking();
    java.lang.String var50 = var49.toString();
    java.util.List var51 = var49.getRank();
    var40.persistirDados(var49);
    classes.Ranking var53 = new classes.Ranking();
    boolean var56 = var53.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var59 = var53.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var60 = var53.getRank();
    var40.persistirDados(var53);
    classes.Persistencia var63 = new classes.Persistencia("");
    classes.Ranking var64 = new classes.Ranking();
    java.util.List var65 = var64.getRank();
    var63.persistirDados(var64);
    classes.Ranking var67 = new classes.Ranking();
    java.util.List var68 = var67.getRank();
    classes.Ranking var69 = var63.lerDados(var67);
    java.util.List var70 = var69.getRank();
    classes.Ranking var71 = var40.lerDados(var69);
    var1.persistirDados(var71);
    classes.Persistencia var74 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var76 = new classes.Persistencia("");
    classes.Ranking var77 = new classes.Ranking();
    java.util.List var78 = var77.getRank();
    var76.persistirDados(var77);
    classes.Ranking var80 = new classes.Ranking();
    java.util.List var81 = var80.getRank();
    classes.Ranking var82 = var76.lerDados(var80);
    classes.Ranking var83 = new classes.Ranking();
    java.util.List var84 = var83.getRank();
    java.lang.String var85 = var83.toString();
    java.lang.String var86 = var83.toString();
    var76.persistirDados(var83);
    classes.Ranking var88 = var74.lerDados(var83);
    boolean var91 = var83.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    java.lang.String var92 = var83.toString();
    boolean var95 = var83.CheckRanking("1\u00BA -  - 2", (java.lang.Integer)1);
    classes.Ranking var96 = var1.lerDados(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var92.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Ranking var9 = var1.lerDados(var7);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var13 = new classes.Persistencia("");
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    var13.persistirDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    var13.persistirDados(var17);
    classes.Ranking var19 = var11.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    java.util.List var36 = var30.getRank();
    classes.Ranking var37 = var11.lerDados(var30);
    classes.Ranking var38 = var1.lerDados(var30);
    boolean var41 = var30.CheckRanking("Nome: | Pontuacao: 1", (java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    java.lang.String var20 = var17.toString();
    boolean var23 = var17.CheckRanking("Nome: 1\u00BA -  - -1| Pontuacao: 100", (java.lang.Integer)(-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("hi!");
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    boolean var29 = var21.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var10.persistirDados(var21);
    java.lang.String var31 = var21.toString();
    classes.Ranking var32 = var3.lerDados(var21);
    classes.Ranking var33 = var1.lerDados(var32);
    classes.Persistencia var35 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var37 = new classes.Persistencia("");
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    var37.persistirDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    classes.Ranking var43 = var37.lerDados(var41);
    var35.persistirDados(var43);
    classes.Ranking var45 = new classes.Ranking();
    boolean var48 = var45.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var51 = var45.CheckRanking("hi!", (java.lang.Integer)10);
    var35.persistirDados(var45);
    classes.Persistencia var54 = new classes.Persistencia("");
    classes.Ranking var55 = new classes.Ranking();
    java.util.List var56 = var55.getRank();
    var54.persistirDados(var55);
    classes.Ranking var58 = new classes.Ranking();
    java.util.List var59 = var58.getRank();
    classes.Ranking var60 = var54.lerDados(var58);
    var35.persistirDados(var60);
    classes.Ranking var62 = var1.lerDados(var60);
    classes.Persistencia var64 = new classes.Persistencia("");
    classes.Ranking var65 = new classes.Ranking();
    boolean var68 = var65.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var69 = var65.getRank();
    java.util.List var70 = var65.getRank();
    var64.persistirDados(var65);
    classes.Persistencia var73 = new classes.Persistencia("");
    classes.Ranking var74 = new classes.Ranking();
    java.util.List var75 = var74.getRank();
    var73.persistirDados(var74);
    classes.Ranking var77 = new classes.Ranking();
    var73.persistirDados(var77);
    classes.Ranking var79 = new classes.Ranking();
    java.util.List var80 = var79.getRank();
    java.lang.String var81 = var79.toString();
    var73.persistirDados(var79);
    classes.Ranking var83 = var64.lerDados(var79);
    boolean var86 = var83.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-90));
    var1.persistirDados(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var31.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    java.lang.String var11 = var7.toString();
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.getName();
    int var16 = var14.getScore();
    classes.Gamer var19 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var20 = var14.compareTo(var19);
    java.lang.String var21 = var14.toString();
    int var22 = var7.compareTo(var14);
    int var23 = var14.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    classes.Operator var3 = new classes.Operator(10, 2, 100);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    int var7 = var3.getResult();
    int var8 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", (-2));

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    classes.Operator var3 = new classes.Operator(0, 1, (-2));

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - Nome: | Pontuacao: 2 - 2");

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.toString();
    java.lang.String var7 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var5.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    boolean var20 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var1.persistirDados(var12);
    java.util.List var22 = var12.getRank();
    java.lang.String var23 = var12.toString();
    boolean var26 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var23.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    java.lang.String var11 = var7.toString();
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.getName();
    int var16 = var14.getScore();
    classes.Gamer var19 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var20 = var14.compareTo(var19);
    java.lang.String var21 = var14.toString();
    int var22 = var7.compareTo(var14);
    java.lang.String var23 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var23.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    boolean var18 = var10.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    java.lang.String var19 = var10.toString();
    boolean var22 = var10.CheckRanking("1\u00BA -  - 2", (java.lang.Integer)1);
    boolean var25 = var10.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var19.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10", (-90));

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var2.toString();
    int var10 = var2.getScore();
    java.lang.String var11 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    java.util.List var36 = var35.getRank();
    boolean var39 = var35.CheckRanking("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100", (java.lang.Integer)(-101));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    java.lang.String var11 = var2.toString();
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    int var28 = var14.getScore();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    java.lang.String var32 = var31.getName();
    int var33 = var31.getScore();
    classes.Gamer var36 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var37 = var31.compareTo(var36);
    int var38 = var14.compareTo(var31);
    int var39 = var2.compareTo(var14);
    int var40 = var2.getScore();
    java.lang.String var41 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    classes.Operator var3 = new classes.Operator(2, 10, (-90));
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    classes.Operator var3 = new classes.Operator((-1), 2, 2);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-2));

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    classes.Operator var3 = new classes.Operator(90, 1, 1089);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    java.util.List var36 = var30.getRank();
    classes.Ranking var37 = var1.lerDados(var30);
    boolean var40 = var30.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)(-101));
    boolean var43 = var30.CheckRanking("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100", (java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    classes.Operator var3 = new classes.Operator(88, 2, 11);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    classes.Operator var3 = new classes.Operator(2, 99, 10);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("hi!");
    classes.Persistencia var17 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    java.lang.String var29 = var26.toString();
    var19.persistirDados(var26);
    classes.Ranking var31 = var17.lerDados(var26);
    boolean var34 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var15.persistirDados(var26);
    classes.Ranking var36 = var1.lerDados(var26);
    classes.Persistencia var38 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var40 = new classes.Persistencia("");
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    var40.persistirDados(var41);
    classes.Ranking var44 = new classes.Ranking();
    var40.persistirDados(var44);
    classes.Ranking var46 = var38.lerDados(var44);
    classes.Persistencia var48 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var50 = new classes.Persistencia("");
    classes.Ranking var51 = new classes.Ranking();
    java.util.List var52 = var51.getRank();
    var50.persistirDados(var51);
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    classes.Ranking var56 = var50.lerDados(var54);
    classes.Ranking var57 = new classes.Ranking();
    java.util.List var58 = var57.getRank();
    java.lang.String var59 = var57.toString();
    java.lang.String var60 = var57.toString();
    var50.persistirDados(var57);
    classes.Ranking var62 = var48.lerDados(var57);
    java.util.List var63 = var57.getRank();
    classes.Ranking var64 = var38.lerDados(var57);
    classes.Persistencia var66 = new classes.Persistencia("hi!");
    classes.Ranking var67 = new classes.Ranking();
    boolean var70 = var67.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var73 = var67.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var74 = var66.lerDados(var67);
    var38.persistirDados(var67);
    var1.persistirDados(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    classes.Gamer var2 = new classes.Gamer("Nome: | Pontuacao: 2", (-90));

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    boolean var12 = var2.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var15 = var2.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", (java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    classes.Operator var3 = new classes.Operator(2, (-1), 0);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    classes.Operator var3 = new classes.Operator((-99), (-2), 100);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - 2| Pontuacao: 2", 99);
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA -  - 2| Pontuacao: 2"+ "'", var3.equals("Nome: 1\u00BA -  - 2| Pontuacao: 2"));

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 10);
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var3.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    java.lang.String var28 = var25.toString();
    java.lang.String var29 = var25.toString();
    classes.Ranking var30 = var1.lerDados(var25);
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    classes.Operator var3 = new classes.Operator(10, 2, (-101));

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", 90);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var3.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100"+ "'", var4.equals("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100"+ "'", var5.equals("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100"));

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    boolean var20 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var1.persistirDados(var12);
    classes.Persistencia var23 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var25 = new classes.Persistencia("");
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    var25.persistirDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var25.lerDados(var29);
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    java.lang.String var34 = var32.toString();
    java.lang.String var35 = var32.toString();
    var25.persistirDados(var32);
    classes.Ranking var37 = var23.lerDados(var32);
    boolean var40 = var32.CheckRanking("", (java.lang.Integer)1);
    classes.Ranking var41 = var1.lerDados(var32);
    boolean var44 = var32.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)(-99));
    java.lang.String var45 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "1\u00BA -  - 12\u00BA - Nome: | Pontuacao: 2 - -99"+ "'", var45.equals("1\u00BA -  - 12\u00BA - Nome: | Pontuacao: 2 - -99"));

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var5.compareTo(var10);
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    int var14 = var2.compareTo(var10);
    java.lang.String var15 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Ranking var24 = new classes.Ranking();
    boolean var27 = var24.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var30 = var24.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var31 = var24.getRank();
    var11.persistirDados(var24);
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    classes.Ranking var40 = var34.lerDados(var38);
    boolean var43 = var40.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var44 = var11.lerDados(var40);
    var1.persistirDados(var44);
    java.lang.String var46 = var44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("");
    classes.Ranking var22 = new classes.Ranking();
    java.util.List var23 = var22.getRank();
    var21.persistirDados(var22);
    classes.Ranking var25 = new classes.Ranking();
    var21.persistirDados(var25);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    java.util.List var35 = var34.getRank();
    classes.Ranking var36 = var30.lerDados(var34);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    java.lang.String var39 = var37.toString();
    java.lang.String var40 = var37.toString();
    var30.persistirDados(var37);
    classes.Ranking var42 = var28.lerDados(var37);
    java.lang.String var43 = var37.toString();
    var21.persistirDados(var37);
    boolean var47 = var37.CheckRanking("1\u00BA -  - 2", (java.lang.Integer)11);
    classes.Ranking var48 = var1.lerDados(var37);
    java.lang.String var49 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "1\u00BA - 1\u00BA -  - 2 - 11"+ "'", var49.equals("1\u00BA - 1\u00BA -  - 2 - 11"));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 10");

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    classes.Gamer var2 = new classes.Gamer("Nome: hi!| Pontuacao: 10", (-1));

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("hi!");
    classes.Ranking var58 = new classes.Ranking();
    boolean var61 = var58.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var64 = var58.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var65 = var57.lerDados(var58);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    var57.persistirDados(var66);
    classes.Ranking var70 = new classes.Ranking();
    java.util.List var71 = var70.getRank();
    classes.Ranking var72 = var57.lerDados(var70);
    classes.Ranking var73 = var1.lerDados(var70);
    java.lang.String var74 = var70.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 1089);
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1089);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    classes.Ranking var36 = new classes.Ranking();
    java.lang.String var37 = var36.toString();
    java.util.List var38 = var36.getRank();
    classes.Ranking var39 = var21.lerDados(var36);
    classes.Ranking var40 = var1.lerDados(var36);
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    classes.Ranking var48 = var1.lerDados(var41);
    boolean var51 = var48.CheckRanking("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2", (java.lang.Integer)100);
    java.lang.String var52 = var48.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100"+ "'", var52.equals("1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100"));

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    boolean var12 = var9.CheckRanking("1\u00BA - Nome: | Pontuacao: 2 - 2", (java.lang.Integer)90);
    java.util.List var13 = var9.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("hi!");
    classes.Persistencia var17 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    java.lang.String var29 = var26.toString();
    var19.persistirDados(var26);
    classes.Ranking var31 = var17.lerDados(var26);
    boolean var34 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var15.persistirDados(var26);
    classes.Ranking var36 = var1.lerDados(var26);
    boolean var39 = var36.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", (java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    classes.Operator var3 = new classes.Operator(10, (-1), 100);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    int var7 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var6 = var2.getRank();
    java.util.List var7 = var2.getRank();
    var1.persistirDados(var2);
    java.lang.String var9 = var2.toString();
    boolean var12 = var2.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var9.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.getName();
    classes.Gamer var13 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    java.lang.String var19 = var16.getName();
    int var20 = var13.compareTo(var16);
    java.lang.String var21 = var13.getName();
    int var22 = var7.compareTo(var13);
    java.lang.String var23 = var7.getName();
    java.lang.String var24 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA -  - -1"+ "'", var21.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var24.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    int var9 = var7.getScore();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    int var15 = var14.getScore();
    int var16 = var14.getScore();
    int var17 = var7.compareTo(var14);
    int var18 = var7.getScore();
    int var19 = var7.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 100);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    java.lang.String var25 = var10.toString();
    int var26 = var10.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - 2| Pontuacao: 1", (-2));

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    int var11 = var7.getScore();
    java.lang.String var12 = var7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    java.util.List var20 = var17.getRank();
    java.lang.String var21 = var17.toString();
    java.util.List var22 = var17.getRank();
    java.util.List var23 = var17.getRank();
    boolean var26 = var17.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)(-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.getName();
    classes.Gamer var13 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    java.lang.String var19 = var16.getName();
    int var20 = var13.compareTo(var16);
    java.lang.String var21 = var13.getName();
    int var22 = var7.compareTo(var13);
    classes.Gamer var25 = new classes.Gamer("hi!", 10);
    classes.Gamer var28 = new classes.Gamer("hi!", 100);
    java.lang.String var29 = var28.getName();
    java.lang.String var30 = var28.toString();
    int var31 = var25.compareTo(var28);
    int var32 = var13.compareTo(var28);
    int var33 = var13.getScore();
    java.lang.String var34 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA -  - -1"+ "'", var21.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var34.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    classes.Operator var3 = new classes.Operator(90, (-1), 99);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    java.lang.String var11 = var7.toString();
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.getName();
    java.lang.String var16 = var14.toString();
    int var17 = var14.getScore();
    java.lang.String var18 = var14.getName();
    classes.Gamer var21 = new classes.Gamer("hi!", 10);
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var24.toString();
    int var27 = var21.compareTo(var24);
    int var28 = var14.compareTo(var24);
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    java.lang.String var32 = var31.getName();
    java.lang.String var33 = var31.toString();
    int var34 = var31.getScore();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.getName();
    int var39 = var37.getScore();
    int var40 = var31.compareTo(var37);
    java.lang.String var41 = var37.getName();
    int var42 = var24.compareTo(var37);
    int var43 = var37.getScore();
    int var44 = var7.compareTo(var37);
    classes.Gamer var47 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var48 = var37.compareTo(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var16.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var26.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    classes.Operator var3 = new classes.Operator(1, 11, 88);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    classes.Gamer var30 = new classes.Gamer("hi!", 100);
    java.lang.String var31 = var30.toString();
    int var32 = var30.getScore();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    int var36 = var30.compareTo(var35);
    java.lang.String var37 = var35.toString();
    int var38 = var14.compareTo(var35);
    classes.Gamer var41 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    java.lang.String var47 = var44.getName();
    int var48 = var41.compareTo(var44);
    int var49 = var41.getScore();
    int var50 = var14.compareTo(var41);
    int var51 = var7.compareTo(var41);
    classes.Gamer var54 = new classes.Gamer("hi!", 100);
    java.lang.String var55 = var54.toString();
    int var56 = var54.getScore();
    java.lang.String var57 = var54.getName();
    classes.Gamer var60 = new classes.Gamer("hi!", 100);
    java.lang.String var61 = var60.toString();
    int var62 = var60.getScore();
    classes.Gamer var65 = new classes.Gamer("hi!", 100);
    int var66 = var60.compareTo(var65);
    int var67 = var54.compareTo(var60);
    classes.Gamer var70 = new classes.Gamer("hi!", 100);
    java.lang.String var71 = var70.toString();
    int var72 = var70.getScore();
    classes.Gamer var75 = new classes.Gamer("hi!", 100);
    int var76 = var70.compareTo(var75);
    java.lang.String var77 = var75.toString();
    int var78 = var54.compareTo(var75);
    int var79 = var41.compareTo(var54);
    java.lang.String var80 = var41.toString();
    java.lang.String var81 = var41.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var55.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var61.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var71.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var77.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var80.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var81.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    boolean var22 = var18.CheckRanking("", (java.lang.Integer)2);
    java.lang.String var23 = var18.toString();
    java.util.List var24 = var18.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "1\u00BA -  - 2"+ "'", var23.equals("1\u00BA -  - 2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.getName();
    int var10 = var8.getScore();
    int var11 = var2.compareTo(var8);
    java.lang.String var12 = var8.getName();
    int var13 = var8.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    classes.Ranking var37 = var31.lerDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    java.lang.String var40 = var38.toString();
    java.lang.String var41 = var38.toString();
    var31.persistirDados(var38);
    classes.Ranking var43 = var29.lerDados(var38);
    java.util.List var44 = var38.getRank();
    java.util.List var45 = var38.getRank();
    classes.Ranking var46 = var1.lerDados(var38);
    classes.Ranking var47 = new classes.Ranking();
    boolean var50 = var47.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var53 = var47.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    java.util.List var54 = var47.getRank();
    boolean var57 = var47.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)(-90));
    java.util.List var58 = var47.getRank();
    var1.persistirDados(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - 2");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    var5.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    java.lang.String var27 = var21.toString();
    var5.persistirDados(var21);
    classes.Ranking var29 = var3.lerDados(var21);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    java.lang.String var35 = var32.toString();
    java.util.List var36 = var32.getRank();
    classes.Ranking var37 = var3.lerDados(var32);
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    var39.persistirDados(var43);
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    java.lang.String var47 = var45.toString();
    var39.persistirDados(var45);
    classes.Persistencia var50 = new classes.Persistencia("hi!");
    classes.Ranking var51 = new classes.Ranking();
    boolean var54 = var51.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var57 = var51.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var58 = var50.lerDados(var51);
    classes.Ranking var59 = new classes.Ranking();
    java.lang.String var60 = var59.toString();
    java.util.List var61 = var59.getRank();
    var50.persistirDados(var59);
    classes.Persistencia var64 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var66 = new classes.Persistencia("");
    classes.Ranking var67 = new classes.Ranking();
    java.util.List var68 = var67.getRank();
    var66.persistirDados(var67);
    classes.Ranking var70 = new classes.Ranking();
    java.util.List var71 = var70.getRank();
    classes.Ranking var72 = var66.lerDados(var70);
    var64.persistirDados(var72);
    java.lang.String var74 = var72.toString();
    classes.Ranking var75 = var50.lerDados(var72);
    classes.Ranking var76 = var39.lerDados(var75);
    classes.Ranking var77 = var3.lerDados(var76);
    var1.persistirDados(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    classes.Persistencia var36 = new classes.Persistencia("hi!");
    classes.Ranking var37 = new classes.Ranking();
    boolean var40 = var37.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var43 = var37.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var44 = var36.lerDados(var37);
    classes.Ranking var45 = var1.lerDados(var44);
    java.util.List var46 = var45.getRank();
    java.util.List var47 = var45.getRank();
    boolean var50 = var45.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1", (java.lang.Integer)(-10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    boolean var21 = var18.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var22 = var18.getRank();
    java.util.List var23 = var18.getRank();
    var17.persistirDados(var18);
    var1.persistirDados(var18);
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    boolean var31 = var28.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var32 = var28.getRank();
    java.util.List var33 = var28.getRank();
    var27.persistirDados(var28);
    classes.Persistencia var36 = new classes.Persistencia("");
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    var36.persistirDados(var37);
    classes.Ranking var40 = new classes.Ranking();
    var36.persistirDados(var40);
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    java.lang.String var44 = var42.toString();
    var36.persistirDados(var42);
    classes.Ranking var46 = var27.lerDados(var42);
    boolean var49 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-90));
    classes.Ranking var50 = var1.lerDados(var46);
    classes.Persistencia var52 = new classes.Persistencia("hi!");
    classes.Ranking var53 = new classes.Ranking();
    boolean var56 = var53.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var59 = var53.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var60 = var52.lerDados(var53);
    classes.Ranking var61 = new classes.Ranking();
    java.util.List var62 = var61.getRank();
    java.lang.String var63 = var61.toString();
    var52.persistirDados(var61);
    classes.Ranking var65 = new classes.Ranking();
    java.util.List var66 = var65.getRank();
    classes.Ranking var67 = var52.lerDados(var65);
    classes.Ranking var68 = new classes.Ranking();
    java.lang.String var69 = var68.toString();
    java.util.List var70 = var68.getRank();
    boolean var73 = var68.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    classes.Ranking var74 = var52.lerDados(var68);
    classes.Persistencia var76 = new classes.Persistencia("");
    classes.Ranking var77 = new classes.Ranking();
    java.util.List var78 = var77.getRank();
    var76.persistirDados(var77);
    classes.Ranking var80 = new classes.Ranking();
    java.util.List var81 = var80.getRank();
    classes.Ranking var82 = var76.lerDados(var80);
    boolean var85 = var82.CheckRanking("", (java.lang.Integer)(-1));
    java.lang.String var86 = var82.toString();
    classes.Ranking var87 = var52.lerDados(var82);
    java.util.List var88 = var87.getRank();
    boolean var91 = var87.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)(-99));
    var1.persistirDados(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "1\u00BA -  - -1"+ "'", var86.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    java.lang.String var11 = var7.toString();
    java.lang.String var12 = var7.toString();
    java.lang.String var13 = var7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.getName();
    int var10 = var8.getScore();
    int var11 = var2.compareTo(var8);
    int var12 = var2.getScore();
    int var13 = var2.getScore();
    java.lang.String var14 = var2.toString();
    int var15 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    classes.Operator var3 = new classes.Operator(98, (-90), 0);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    int var15 = var13.getScore();
    java.lang.String var16 = var13.getName();
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.toString();
    int var21 = var19.getScore();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    int var25 = var19.compareTo(var24);
    int var26 = var13.compareTo(var19);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    int var32 = var19.compareTo(var29);
    java.lang.String var33 = var19.toString();
    int var34 = var9.compareTo(var19);
    java.lang.String var35 = var9.toString();
    classes.Gamer var38 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", 98);
    int var39 = var9.compareTo(var38);
    java.lang.String var40 = var9.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var20.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Nome: | Pontuacao: 10"+ "'", var35.equals("Nome: | Pontuacao: 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    classes.Operator var3 = new classes.Operator((-10), 1, 1089);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var25 = new classes.Persistencia("");
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    var25.persistirDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var25.lerDados(var29);
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    java.lang.String var34 = var32.toString();
    java.lang.String var35 = var32.toString();
    var25.persistirDados(var32);
    classes.Ranking var37 = var23.lerDados(var32);
    java.lang.String var38 = var37.toString();
    classes.Ranking var39 = var21.lerDados(var37);
    classes.Ranking var40 = var1.lerDados(var39);
    classes.Persistencia var42 = new classes.Persistencia("hi!");
    classes.Ranking var43 = new classes.Ranking();
    boolean var46 = var43.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var49 = var43.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var50 = var42.lerDados(var43);
    classes.Ranking var51 = new classes.Ranking();
    java.lang.String var52 = var51.toString();
    java.util.List var53 = var51.getRank();
    var42.persistirDados(var51);
    classes.Persistencia var56 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var58 = new classes.Persistencia("");
    classes.Ranking var59 = new classes.Ranking();
    java.util.List var60 = var59.getRank();
    var58.persistirDados(var59);
    classes.Ranking var62 = new classes.Ranking();
    java.util.List var63 = var62.getRank();
    classes.Ranking var64 = var58.lerDados(var62);
    var56.persistirDados(var64);
    java.lang.String var66 = var64.toString();
    classes.Ranking var67 = var42.lerDados(var64);
    classes.Ranking var68 = var1.lerDados(var67);
    boolean var71 = var68.CheckRanking("1\u00BA -  - 12\u00BA - Nome: | Pontuacao: 2 - -99", (java.lang.Integer)(-100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var6 = var0.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-99));
    java.util.List var7 = var0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var7.getScore();
    int var9 = var7.getScore();
    java.lang.String var10 = var7.getName();
    java.lang.String var11 = var7.getName();
    int var12 = var7.getScore();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    java.lang.String var16 = var15.getName();
    java.lang.String var17 = var15.toString();
    int var18 = var15.getScore();
    java.lang.String var19 = var15.getName();
    java.lang.String var20 = var15.getName();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    java.lang.String var24 = var23.toString();
    int var25 = var23.getScore();
    java.lang.String var26 = var23.getName();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    classes.Gamer var34 = new classes.Gamer("hi!", 100);
    int var35 = var29.compareTo(var34);
    int var36 = var23.compareTo(var29);
    int var37 = var15.compareTo(var23);
    int var38 = var7.compareTo(var15);
    int var39 = var2.compareTo(var15);
    classes.Gamer var42 = new classes.Gamer("hi!", 100);
    int var43 = var42.getScore();
    int var44 = var42.getScore();
    java.lang.String var45 = var42.getName();
    int var46 = var2.compareTo(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var24.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    classes.Operator var3 = new classes.Operator((-100), 1089, 90);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    classes.Operator var3 = new classes.Operator((-90), 100, 0);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: | Pontuacao: 2 - 2", 1);
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "1\u00BA - Nome: | Pontuacao: 2 - 2"+ "'", var3.equals("1\u00BA - Nome: | Pontuacao: 2 - 2"));

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    java.lang.String var11 = var9.getName();
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.toString();
    int var18 = var9.compareTo(var14);
    int var19 = var9.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    classes.Operator var3 = new classes.Operator((-1), 1089, 88);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    java.lang.String var5 = var2.toString();
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var9 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 98);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var10.getScore();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    java.lang.String var14 = var10.getName();
    int var15 = var10.getScore();
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.getName();
    java.lang.String var20 = var18.toString();
    int var21 = var18.getScore();
    java.lang.String var22 = var18.getName();
    java.lang.String var23 = var18.getName();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.toString();
    int var28 = var26.getScore();
    java.lang.String var29 = var26.getName();
    classes.Gamer var32 = new classes.Gamer("hi!", 100);
    java.lang.String var33 = var32.toString();
    int var34 = var32.getScore();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    int var38 = var32.compareTo(var37);
    int var39 = var26.compareTo(var32);
    int var40 = var18.compareTo(var26);
    int var41 = var10.compareTo(var18);
    int var42 = var5.compareTo(var18);
    int var43 = var2.compareTo(var18);
    java.lang.String var44 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var20.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var27.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 98"+ "'", var44.equals("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 98"));

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    classes.Ranking var11 = new classes.Ranking();
    boolean var14 = var11.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var17 = var11.CheckRanking("hi!", (java.lang.Integer)10);
    var1.persistirDados(var11);
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    var1.persistirDados(var26);
    classes.Persistencia var29 = new classes.Persistencia("hi!");
    classes.Ranking var30 = new classes.Ranking();
    boolean var33 = var30.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var36 = var30.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var37 = var29.lerDados(var30);
    classes.Ranking var38 = new classes.Ranking();
    java.lang.String var39 = var38.toString();
    java.util.List var40 = var38.getRank();
    var29.persistirDados(var38);
    classes.Persistencia var43 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var45 = new classes.Persistencia("");
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    var45.persistirDados(var46);
    classes.Ranking var49 = new classes.Ranking();
    java.util.List var50 = var49.getRank();
    classes.Ranking var51 = var45.lerDados(var49);
    var43.persistirDados(var51);
    java.lang.String var53 = var51.toString();
    classes.Ranking var54 = var29.lerDados(var51);
    boolean var57 = var51.CheckRanking("Nome: 1\u00BA -  - 2| Pontuacao: 1", (java.lang.Integer)100);
    classes.Ranking var58 = var1.lerDados(var51);
    classes.Persistencia var60 = new classes.Persistencia("hi!");
    classes.Ranking var61 = new classes.Ranking();
    boolean var64 = var61.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var67 = var61.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var68 = var60.lerDados(var61);
    boolean var71 = var61.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var74 = var61.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)1089);
    var1.persistirDados(var61);
    classes.Ranking var76 = new classes.Ranking();
    boolean var79 = var76.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var80 = var76.getRank();
    java.util.List var81 = var76.getRank();
    java.util.List var82 = var76.getRank();
    var1.persistirDados(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    java.lang.String var28 = var25.toString();
    java.lang.String var29 = var25.toString();
    classes.Ranking var30 = var1.lerDados(var25);
    classes.Persistencia var32 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    classes.Ranking var40 = var34.lerDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    var34.persistirDados(var41);
    classes.Ranking var46 = var32.lerDados(var41);
    boolean var49 = var41.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var52 = var41.CheckRanking("", (java.lang.Integer)10);
    java.util.List var53 = var41.getRank();
    boolean var56 = var41.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)0);
    var1.persistirDados(var41);
    boolean var60 = var41.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100", (java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    classes.Operator var3 = new classes.Operator(0, (-90), 1);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 90);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - 2| Pontuacao: 1", (-99));
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99"+ "'", var3.equals("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99"));

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    java.lang.String var10 = var2.toString();
    java.lang.String var11 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var10.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "1\u00BA -  - -1"+ "'", var11.equals("1\u00BA -  - -1"));

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    java.util.List var36 = var30.getRank();
    classes.Ranking var37 = var1.lerDados(var30);
    classes.Persistencia var39 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var41 = new classes.Persistencia("");
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    var41.persistirDados(var42);
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    classes.Ranking var47 = var41.lerDados(var45);
    var39.persistirDados(var47);
    java.lang.String var49 = var47.toString();
    java.lang.String var50 = var47.toString();
    boolean var53 = var47.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)2);
    var1.persistirDados(var47);
    java.lang.String var55 = var47.toString();
    boolean var58 = var47.CheckRanking("", (java.lang.Integer)11);
    java.lang.String var59 = var47.toString();
    java.util.List var60 = var47.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "1\u00BA - Nome: | Pontuacao: 2 - 2"+ "'", var55.equals("1\u00BA - Nome: | Pontuacao: 2 - 2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "1\u00BA - Nome: | Pontuacao: 2 - 22\u00BA -  - 11"+ "'", var59.equals("1\u00BA - Nome: | Pontuacao: 2 - 22\u00BA -  - 11"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var6 = var2.getRank();
    java.util.List var7 = var2.getRank();
    var1.persistirDados(var2);
    classes.Persistencia var10 = new classes.Persistencia("");
    classes.Ranking var11 = new classes.Ranking();
    java.util.List var12 = var11.getRank();
    var10.persistirDados(var11);
    classes.Ranking var14 = new classes.Ranking();
    var10.persistirDados(var14);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    java.lang.String var18 = var16.toString();
    var10.persistirDados(var16);
    classes.Ranking var20 = var1.lerDados(var16);
    boolean var23 = var20.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-90));
    boolean var26 = var20.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    boolean var20 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var1.persistirDados(var12);
    java.util.List var22 = var12.getRank();
    boolean var25 = var12.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)(-1));
    java.lang.String var26 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - -1"+ "'", var26.equals("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - -1"));

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    classes.Persistencia var1 = new classes.Persistencia("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99");

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    classes.Gamer var2 = new classes.Gamer("", (-1));
    java.lang.String var3 = var2.toString();
    classes.Gamer var6 = new classes.Gamer("hi!", (-1));
    int var7 = var2.compareTo(var6);
    classes.Gamer var10 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    int var15 = var13.getScore();
    java.lang.String var16 = var13.getName();
    int var17 = var10.compareTo(var13);
    int var18 = var10.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.getName();
    int var28 = var26.getScore();
    int var29 = var26.getScore();
    int var30 = var21.compareTo(var26);
    int var31 = var10.compareTo(var21);
    int var32 = var2.compareTo(var10);
    java.lang.String var33 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: | Pontuacao: -1"+ "'", var3.equals("Nome: | Pontuacao: -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var22.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var23.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    classes.Ranking var11 = new classes.Ranking();
    boolean var14 = var11.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var17 = var11.CheckRanking("hi!", (java.lang.Integer)10);
    var1.persistirDados(var11);
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    var1.persistirDados(var26);
    classes.Persistencia var29 = new classes.Persistencia("hi!");
    classes.Ranking var30 = new classes.Ranking();
    boolean var33 = var30.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var36 = var30.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var37 = var29.lerDados(var30);
    classes.Ranking var38 = new classes.Ranking();
    java.lang.String var39 = var38.toString();
    java.util.List var40 = var38.getRank();
    var29.persistirDados(var38);
    classes.Persistencia var43 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var45 = new classes.Persistencia("");
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    var45.persistirDados(var46);
    classes.Ranking var49 = new classes.Ranking();
    java.util.List var50 = var49.getRank();
    classes.Ranking var51 = var45.lerDados(var49);
    var43.persistirDados(var51);
    java.lang.String var53 = var51.toString();
    classes.Ranking var54 = var29.lerDados(var51);
    boolean var57 = var51.CheckRanking("Nome: 1\u00BA -  - 2| Pontuacao: 1", (java.lang.Integer)100);
    classes.Ranking var58 = var1.lerDados(var51);
    classes.Persistencia var60 = new classes.Persistencia("hi!");
    classes.Ranking var61 = new classes.Ranking();
    boolean var64 = var61.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var67 = var61.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var68 = var60.lerDados(var61);
    boolean var71 = var61.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var74 = var61.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)1089);
    var1.persistirDados(var61);
    java.lang.String var76 = var61.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 104\u00BA - Nome: hi!| Pontuacao: 100 - 1089"+ "'", var76.equals("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 104\u00BA - Nome: hi!| Pontuacao: 100 - 1089"));

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    boolean var25 = var14.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", (java.lang.Integer)100);
    java.util.List var26 = var14.getRank();
    java.util.List var27 = var14.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    int var5 = var2.getScore();
    int var6 = var2.getScore();
    java.lang.String var7 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - 2", 88);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    classes.Ranking var37 = var31.lerDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    java.lang.String var40 = var38.toString();
    java.lang.String var41 = var38.toString();
    var31.persistirDados(var38);
    classes.Ranking var43 = var29.lerDados(var38);
    java.util.List var44 = var38.getRank();
    java.util.List var45 = var38.getRank();
    classes.Ranking var46 = var1.lerDados(var38);
    java.lang.String var47 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    classes.Operator var3 = new classes.Operator((-99), 8910, 11);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    classes.Persistencia var1 = new classes.Persistencia("Nome: | Pontuacao: -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    var5.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    java.lang.String var27 = var21.toString();
    var5.persistirDados(var21);
    classes.Ranking var29 = var3.lerDados(var21);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    java.lang.String var35 = var32.toString();
    java.util.List var36 = var32.getRank();
    classes.Ranking var37 = var3.lerDados(var32);
    var1.persistirDados(var32);
    classes.Ranking var39 = new classes.Ranking();
    java.lang.String var40 = var39.toString();
    java.util.List var41 = var39.getRank();
    boolean var44 = var39.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    java.lang.String var45 = var39.toString();
    java.lang.String var46 = var39.toString();
    var1.persistirDados(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "1\u00BA - Nome: hi!| Pontuacao: 100 - 100"+ "'", var45.equals("1\u00BA - Nome: hi!| Pontuacao: 100 - 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "1\u00BA - Nome: hi!| Pontuacao: 100 - 100"+ "'", var46.equals("1\u00BA - Nome: hi!| Pontuacao: 100 - 100"));

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    java.util.List var5 = var2.getRank();
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.getName();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.toString();
    int var7 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    classes.Operator var3 = new classes.Operator((-10), 99, (-2));

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    boolean var12 = var9.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)(-90));
    java.lang.String var13 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - -90"+ "'", var13.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - -90"));

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    java.util.List var36 = var35.getRank();
    java.lang.String var37 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    classes.Operator var3 = new classes.Operator(100, 1, 10);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    classes.Gamer var2 = new classes.Gamer("hi!", (-100));

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0", 1089);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    java.lang.String var27 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    classes.Operator var3 = new classes.Operator(0, 90, 1);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    java.util.List var6 = var5.getRank();
    classes.Ranking var7 = var1.lerDados(var5);
    classes.Persistencia var9 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    var11.persistirDados(var15);
    classes.Persistencia var18 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    var20.persistirDados(var27);
    classes.Ranking var32 = var18.lerDados(var27);
    java.lang.String var33 = var27.toString();
    var11.persistirDados(var27);
    classes.Ranking var35 = var9.lerDados(var27);
    var1.persistirDados(var27);
    classes.Persistencia var38 = new classes.Persistencia("");
    classes.Ranking var39 = new classes.Ranking();
    boolean var42 = var39.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var43 = var39.getRank();
    java.util.List var44 = var39.getRank();
    var38.persistirDados(var39);
    var1.persistirDados(var39);
    java.lang.String var47 = var39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var47.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100", 2);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    classes.Operator var3 = new classes.Operator(2, (-90), 8910);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Persistencia var25 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    classes.Ranking var33 = var27.lerDados(var31);
    var25.persistirDados(var33);
    java.lang.String var35 = var33.toString();
    classes.Ranking var36 = var11.lerDados(var33);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Persistencia var40 = new classes.Persistencia("hi!");
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var48 = var40.lerDados(var41);
    var38.persistirDados(var41);
    classes.Ranking var50 = var11.lerDados(var41);
    classes.Ranking var51 = var1.lerDados(var41);
    classes.Persistencia var53 = new classes.Persistencia("hi!");
    classes.Ranking var54 = new classes.Ranking();
    boolean var57 = var54.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var60 = var54.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var61 = var53.lerDados(var54);
    classes.Ranking var62 = new classes.Ranking();
    java.lang.String var63 = var62.toString();
    java.util.List var64 = var62.getRank();
    var53.persistirDados(var62);
    classes.Ranking var66 = new classes.Ranking();
    boolean var69 = var66.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var72 = var66.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var73 = var66.getRank();
    var53.persistirDados(var66);
    classes.Ranking var75 = var1.lerDados(var66);
    java.lang.String var76 = var66.toString();
    java.util.List var77 = var66.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var76.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    classes.Operator var3 = new classes.Operator((-100), 11, 10);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    classes.Operator var3 = new classes.Operator(11, 90, 0);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    int var9 = var7.getScore();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    int var15 = var14.getScore();
    int var16 = var14.getScore();
    int var17 = var7.compareTo(var14);
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var20.toString();
    int var23 = var20.getScore();
    java.lang.String var24 = var20.getName();
    classes.Gamer var27 = new classes.Gamer("", 10);
    int var28 = var20.compareTo(var27);
    int var29 = var20.getScore();
    classes.Gamer var32 = new classes.Gamer("hi!", 10);
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    java.lang.String var36 = var35.getName();
    java.lang.String var37 = var35.toString();
    int var38 = var32.compareTo(var35);
    java.lang.String var39 = var35.getName();
    classes.Gamer var42 = new classes.Gamer("hi!", 100);
    java.lang.String var43 = var42.getName();
    java.lang.String var44 = var42.toString();
    int var45 = var42.getScore();
    java.lang.String var46 = var42.getName();
    java.lang.String var47 = var42.getName();
    classes.Gamer var50 = new classes.Gamer("hi!", 100);
    java.lang.String var51 = var50.toString();
    int var52 = var50.getScore();
    java.lang.String var53 = var50.getName();
    classes.Gamer var56 = new classes.Gamer("hi!", 100);
    java.lang.String var57 = var56.toString();
    int var58 = var56.getScore();
    classes.Gamer var61 = new classes.Gamer("hi!", 100);
    int var62 = var56.compareTo(var61);
    int var63 = var50.compareTo(var56);
    int var64 = var42.compareTo(var50);
    int var65 = var42.getScore();
    int var66 = var35.compareTo(var42);
    int var67 = var20.compareTo(var42);
    int var68 = var42.getScore();
    classes.Gamer var71 = new classes.Gamer("hi!", 10);
    java.lang.String var72 = var71.toString();
    int var73 = var42.compareTo(var71);
    classes.Gamer var76 = new classes.Gamer("hi!", 0);
    java.lang.String var77 = var76.getName();
    java.lang.String var78 = var76.getName();
    int var79 = var71.compareTo(var76);
    int var80 = var14.compareTo(var76);
    java.lang.String var81 = var76.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var22.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var51.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var57.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Nome: hi!| Pontuacao: 10"+ "'", var72.equals("Nome: hi!| Pontuacao: 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    classes.Ranking var36 = new classes.Ranking();
    java.lang.String var37 = var36.toString();
    java.util.List var38 = var36.getRank();
    classes.Ranking var39 = var21.lerDados(var36);
    classes.Ranking var40 = var1.lerDados(var36);
    boolean var43 = var40.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - -1", (java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("hi!");
    classes.Persistencia var17 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    java.lang.String var29 = var26.toString();
    var19.persistirDados(var26);
    classes.Ranking var31 = var17.lerDados(var26);
    boolean var34 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var15.persistirDados(var26);
    classes.Ranking var36 = var1.lerDados(var26);
    boolean var39 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)100);
    java.lang.String var40 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - -1 - 100"+ "'", var40.equals("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - -1 - 100"));

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98", 2);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100");

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var25 = new classes.Persistencia("");
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    var25.persistirDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var25.lerDados(var29);
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    java.lang.String var34 = var32.toString();
    java.lang.String var35 = var32.toString();
    var25.persistirDados(var32);
    classes.Ranking var37 = var23.lerDados(var32);
    java.lang.String var38 = var37.toString();
    classes.Ranking var39 = var21.lerDados(var37);
    classes.Ranking var40 = var1.lerDados(var39);
    java.util.List var41 = var40.getRank();
    java.util.List var42 = var40.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    classes.Operator var3 = new classes.Operator(101, 8910, 98);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    classes.Operator var3 = new classes.Operator(2, (-2), 88);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var6 = var2.getRank();
    java.util.List var7 = var2.getRank();
    var1.persistirDados(var2);
    java.lang.String var9 = var2.toString();
    java.util.List var10 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var9.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    classes.Operator var3 = new classes.Operator(99, 2, 90);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Ranking var9 = var1.lerDados(var7);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var13 = new classes.Persistencia("");
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    var13.persistirDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    classes.Ranking var19 = var13.lerDados(var17);
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    java.lang.String var22 = var20.toString();
    java.lang.String var23 = var20.toString();
    var13.persistirDados(var20);
    classes.Ranking var25 = var11.lerDados(var20);
    java.util.List var26 = var20.getRank();
    classes.Ranking var27 = var1.lerDados(var20);
    classes.Persistencia var29 = new classes.Persistencia("hi!");
    classes.Ranking var30 = new classes.Ranking();
    boolean var33 = var30.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var36 = var30.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var37 = var29.lerDados(var30);
    var1.persistirDados(var30);
    boolean var41 = var30.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1", (java.lang.Integer)11);
    java.lang.String var42 = var30.toString();
    java.lang.String var43 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11"+ "'", var42.equals("1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11"+ "'", var43.equals("1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11"));

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    int var15 = var13.getScore();
    java.lang.String var16 = var13.getName();
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.toString();
    int var21 = var19.getScore();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    int var25 = var19.compareTo(var24);
    int var26 = var13.compareTo(var19);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    int var32 = var19.compareTo(var29);
    java.lang.String var33 = var19.toString();
    int var34 = var9.compareTo(var19);
    java.lang.String var35 = var19.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var20.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.lang.String var18 = var17.toString();
    java.util.List var19 = var17.getRank();
    var8.persistirDados(var17);
    classes.Ranking var21 = var1.lerDados(var17);
    boolean var24 = var17.CheckRanking("Nome: 1\u00BA -  - -1| Pontuacao: 100", (java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    classes.Operator var3 = new classes.Operator(98, (-2), (-90));
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Ranking var9 = var1.lerDados(var7);
    java.lang.String var10 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    java.lang.String var69 = var66.toString();
    var59.persistirDados(var66);
    classes.Ranking var71 = var57.lerDados(var66);
    boolean var74 = var66.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var77 = var66.CheckRanking("", (java.lang.Integer)10);
    java.util.List var78 = var66.getRank();
    var1.persistirDados(var66);
    classes.Ranking var80 = new classes.Ranking();
    boolean var83 = var80.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var86 = var80.CheckRanking("hi!", (java.lang.Integer)10);
    classes.Ranking var87 = var1.lerDados(var80);
    java.util.List var88 = var80.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    int var9 = var7.getScore();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    int var12 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    classes.Operator var3 = new classes.Operator(101, 88, 0);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - -90");

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    boolean var21 = var18.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var22 = var18.getRank();
    java.util.List var23 = var18.getRank();
    var17.persistirDados(var18);
    var1.persistirDados(var18);
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    boolean var31 = var28.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var32 = var28.getRank();
    java.util.List var33 = var28.getRank();
    var27.persistirDados(var28);
    classes.Persistencia var36 = new classes.Persistencia("");
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    var36.persistirDados(var37);
    classes.Ranking var40 = new classes.Ranking();
    var36.persistirDados(var40);
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    java.lang.String var44 = var42.toString();
    var36.persistirDados(var42);
    classes.Ranking var46 = var27.lerDados(var42);
    boolean var49 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-90));
    classes.Ranking var50 = var1.lerDados(var46);
    java.util.List var51 = var50.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    java.lang.String var10 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var10.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 11);
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 11);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    classes.Ranking var17 = var11.lerDados(var15);
    classes.Persistencia var19 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var21 = new classes.Persistencia("");
    classes.Ranking var22 = new classes.Ranking();
    java.util.List var23 = var22.getRank();
    var21.persistirDados(var22);
    classes.Ranking var25 = new classes.Ranking();
    var21.persistirDados(var25);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    java.util.List var35 = var34.getRank();
    classes.Ranking var36 = var30.lerDados(var34);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    java.lang.String var39 = var37.toString();
    java.lang.String var40 = var37.toString();
    var30.persistirDados(var37);
    classes.Ranking var42 = var28.lerDados(var37);
    java.lang.String var43 = var37.toString();
    var21.persistirDados(var37);
    classes.Ranking var45 = var19.lerDados(var37);
    var11.persistirDados(var37);
    classes.Persistencia var48 = new classes.Persistencia("hi!");
    classes.Ranking var49 = new classes.Ranking();
    boolean var52 = var49.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var55 = var49.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var56 = var48.lerDados(var49);
    classes.Ranking var57 = new classes.Ranking();
    java.util.List var58 = var57.getRank();
    java.lang.String var59 = var57.toString();
    var48.persistirDados(var57);
    classes.Ranking var61 = var11.lerDados(var57);
    var1.persistirDados(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    classes.Operator var3 = new classes.Operator((-99), (-101), (-100));

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var1.lerDados(var14);
    classes.Persistencia var18 = new classes.Persistencia("");
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    var18.persistirDados(var19);
    classes.Ranking var22 = new classes.Ranking();
    var18.persistirDados(var22);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    java.lang.String var26 = var24.toString();
    var18.persistirDados(var24);
    classes.Persistencia var29 = new classes.Persistencia("hi!");
    classes.Ranking var30 = new classes.Ranking();
    boolean var33 = var30.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var36 = var30.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var37 = var29.lerDados(var30);
    classes.Ranking var38 = new classes.Ranking();
    java.lang.String var39 = var38.toString();
    java.util.List var40 = var38.getRank();
    var29.persistirDados(var38);
    classes.Persistencia var43 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var45 = new classes.Persistencia("");
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    var45.persistirDados(var46);
    classes.Ranking var49 = new classes.Ranking();
    java.util.List var50 = var49.getRank();
    classes.Ranking var51 = var45.lerDados(var49);
    var43.persistirDados(var51);
    java.lang.String var53 = var51.toString();
    classes.Ranking var54 = var29.lerDados(var51);
    classes.Ranking var55 = var18.lerDados(var54);
    var1.persistirDados(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 89);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    int var24 = var18.compareTo(var23);
    java.lang.String var25 = var23.toString();
    int var26 = var2.compareTo(var23);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    classes.Gamer var34 = new classes.Gamer("hi!", 100);
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = var34.toString();
    int var37 = var34.getScore();
    int var38 = var29.compareTo(var34);
    java.lang.String var39 = var34.toString();
    java.lang.String var40 = var34.toString();
    int var41 = var34.getScore();
    int var42 = var23.compareTo(var34);
    java.lang.String var43 = var34.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var36.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var40.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var43.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    classes.Operator var3 = new classes.Operator(10, 10, (-1));
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    classes.Operator var3 = new classes.Operator(10, (-99), 10);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    classes.Gamer var30 = new classes.Gamer("hi!", 100);
    java.lang.String var31 = var30.toString();
    int var32 = var30.getScore();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    int var36 = var30.compareTo(var35);
    java.lang.String var37 = var35.toString();
    int var38 = var14.compareTo(var35);
    classes.Gamer var41 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    java.lang.String var47 = var44.getName();
    int var48 = var41.compareTo(var44);
    int var49 = var41.getScore();
    int var50 = var14.compareTo(var41);
    int var51 = var7.compareTo(var41);
    classes.Gamer var54 = new classes.Gamer("Nome: | Pontuacao: 2", (-1));
    int var55 = var7.compareTo(var54);
    java.lang.String var56 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var56.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    classes.Operator var3 = new classes.Operator(98, (-99), 11);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    classes.Persistencia var37 = new classes.Persistencia("");
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    var37.persistirDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    var37.persistirDados(var41);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    java.lang.String var45 = var43.toString();
    var37.persistirDados(var43);
    classes.Persistencia var48 = new classes.Persistencia("hi!");
    classes.Ranking var49 = new classes.Ranking();
    boolean var52 = var49.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var55 = var49.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var56 = var48.lerDados(var49);
    classes.Ranking var57 = new classes.Ranking();
    java.lang.String var58 = var57.toString();
    java.util.List var59 = var57.getRank();
    var48.persistirDados(var57);
    classes.Persistencia var62 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var64 = new classes.Persistencia("");
    classes.Ranking var65 = new classes.Ranking();
    java.util.List var66 = var65.getRank();
    var64.persistirDados(var65);
    classes.Ranking var68 = new classes.Ranking();
    java.util.List var69 = var68.getRank();
    classes.Ranking var70 = var64.lerDados(var68);
    var62.persistirDados(var70);
    java.lang.String var72 = var70.toString();
    classes.Ranking var73 = var48.lerDados(var70);
    classes.Ranking var74 = var37.lerDados(var73);
    classes.Ranking var75 = var1.lerDados(var74);
    boolean var78 = var75.CheckRanking("1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11", (java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    classes.Ranking var6 = var3.lerDados(var4);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    java.lang.String var19 = var17.toString();
    var8.persistirDados(var17);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var8.lerDados(var21);
    var3.persistirDados(var21);
    classes.Ranking var25 = var1.lerDados(var21);
    java.util.List var26 = var21.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var1.lerDados(var14);
    java.util.List var17 = var14.getRank();
    java.util.List var18 = var14.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var8 = var2.compareTo(var7);
    int var9 = var7.getScore();
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.toString();
    int var14 = var12.getScore();
    java.lang.String var15 = var12.getName();
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    int var24 = var18.compareTo(var23);
    int var25 = var12.compareTo(var18);
    java.lang.String var26 = var12.getName();
    classes.Gamer var29 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var32 = new classes.Gamer("hi!", 100);
    java.lang.String var33 = var32.toString();
    int var34 = var32.getScore();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    int var38 = var32.compareTo(var37);
    java.lang.String var39 = var37.toString();
    java.lang.String var40 = var37.toString();
    int var41 = var29.compareTo(var37);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var29.compareTo(var44);
    int var47 = var12.compareTo(var29);
    int var48 = var29.getScore();
    int var49 = var7.compareTo(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var40.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    var17.persistirDados(var21);
    classes.Ranking var23 = var15.lerDados(var21);
    classes.Persistencia var25 = new classes.Persistencia("hi!");
    classes.Ranking var26 = new classes.Ranking();
    boolean var29 = var26.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var32 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var33 = var25.lerDados(var26);
    classes.Ranking var34 = new classes.Ranking();
    java.lang.String var35 = var34.toString();
    java.util.List var36 = var34.getRank();
    var25.persistirDados(var34);
    classes.Persistencia var39 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var41 = new classes.Persistencia("");
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    var41.persistirDados(var42);
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    classes.Ranking var47 = var41.lerDados(var45);
    var39.persistirDados(var47);
    java.lang.String var49 = var47.toString();
    classes.Ranking var50 = var25.lerDados(var47);
    var15.persistirDados(var50);
    var1.persistirDados(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    java.util.List var6 = var5.getRank();
    classes.Ranking var7 = var1.lerDados(var5);
    classes.Persistencia var9 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    var11.persistirDados(var15);
    classes.Persistencia var18 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    var20.persistirDados(var27);
    classes.Ranking var32 = var18.lerDados(var27);
    java.lang.String var33 = var27.toString();
    var11.persistirDados(var27);
    classes.Ranking var35 = var9.lerDados(var27);
    var1.persistirDados(var27);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Ranking var39 = new classes.Ranking();
    boolean var42 = var39.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var45 = var39.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var46 = var38.lerDados(var39);
    classes.Ranking var47 = new classes.Ranking();
    java.util.List var48 = var47.getRank();
    java.lang.String var49 = var47.toString();
    var38.persistirDados(var47);
    classes.Ranking var51 = var1.lerDados(var47);
    boolean var54 = var47.CheckRanking("1\u00BA - 1\u00BA -  - 2 - 11", (java.lang.Integer)(-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    int var24 = var18.compareTo(var23);
    java.lang.String var25 = var23.toString();
    int var26 = var2.compareTo(var23);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    int var32 = var29.getScore();
    java.lang.String var33 = var29.getName();
    java.lang.String var34 = var29.getName();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.toString();
    int var39 = var37.getScore();
    java.lang.String var40 = var37.getName();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    java.lang.String var44 = var43.toString();
    int var45 = var43.getScore();
    classes.Gamer var48 = new classes.Gamer("hi!", 100);
    int var49 = var43.compareTo(var48);
    int var50 = var37.compareTo(var43);
    int var51 = var29.compareTo(var37);
    classes.Gamer var54 = new classes.Gamer("1\u00BA -  - 2", 1);
    int var55 = var29.compareTo(var54);
    int var56 = var2.compareTo(var29);
    int var57 = var2.getScore();
    classes.Gamer var60 = new classes.Gamer("Nome: | Pontuacao: -1", (-1));
    int var61 = var2.compareTo(var60);
    int var62 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    boolean var27 = var19.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var8.persistirDados(var19);
    java.lang.String var29 = var19.toString();
    classes.Ranking var30 = var1.lerDados(var19);
    classes.Persistencia var32 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    var34.persistirDados(var38);
    classes.Ranking var40 = var32.lerDados(var38);
    classes.Persistencia var42 = new classes.Persistencia("hi!");
    classes.Ranking var43 = new classes.Ranking();
    boolean var46 = var43.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var49 = var43.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var50 = var42.lerDados(var43);
    classes.Ranking var51 = new classes.Ranking();
    java.lang.String var52 = var51.toString();
    java.util.List var53 = var51.getRank();
    var42.persistirDados(var51);
    classes.Persistencia var56 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var58 = new classes.Persistencia("");
    classes.Ranking var59 = new classes.Ranking();
    java.util.List var60 = var59.getRank();
    var58.persistirDados(var59);
    classes.Ranking var62 = new classes.Ranking();
    java.util.List var63 = var62.getRank();
    classes.Ranking var64 = var58.lerDados(var62);
    var56.persistirDados(var64);
    java.lang.String var66 = var64.toString();
    classes.Ranking var67 = var42.lerDados(var64);
    var32.persistirDados(var67);
    classes.Ranking var69 = var1.lerDados(var67);
    java.util.List var70 = var69.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var29.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var8 = var4.getRank();
    java.util.List var9 = var4.getRank();
    var3.persistirDados(var4);
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    var12.persistirDados(var16);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    java.lang.String var20 = var18.toString();
    var12.persistirDados(var18);
    classes.Ranking var22 = var3.lerDados(var18);
    boolean var25 = var22.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-90));
    boolean var28 = var22.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)(-1));
    classes.Ranking var29 = var1.lerDados(var22);
    java.util.List var30 = var29.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    classes.Gamer var2 = new classes.Gamer("Nome: | Pontuacao: 10", (-1));

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", 90);
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 90);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: hi!| Pontuacao: 100 - 1002\u00BA - Nome: | Pontuacao: 2 - 2", (-90));

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    classes.Operator var3 = new classes.Operator(11, 88, (-101));

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    classes.Gamer var2 = new classes.Gamer("hi!", 10);
    int var3 = var2.getScore();
    java.lang.String var4 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    classes.Persistencia var1 = new classes.Persistencia("Nome: | Pontuacao: -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    var5.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    java.lang.String var27 = var21.toString();
    var5.persistirDados(var21);
    classes.Ranking var29 = var3.lerDados(var21);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    java.lang.String var35 = var32.toString();
    java.util.List var36 = var32.getRank();
    classes.Ranking var37 = var3.lerDados(var32);
    var1.persistirDados(var32);
    boolean var41 = var32.CheckRanking("Nome: hi!| Pontuacao: 0", (java.lang.Integer)2);
    java.util.List var42 = var32.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    int var21 = var8.compareTo(var18);
    int var22 = var8.getScore();
    java.lang.String var23 = var8.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    classes.Ranking var11 = new classes.Ranking();
    boolean var14 = var11.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var17 = var11.CheckRanking("hi!", (java.lang.Integer)10);
    var1.persistirDados(var11);
    classes.Persistencia var20 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var22 = new classes.Persistencia("");
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    var22.persistirDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    classes.Ranking var28 = var22.lerDados(var26);
    var20.persistirDados(var28);
    java.lang.String var30 = var28.toString();
    java.lang.String var31 = var28.toString();
    boolean var34 = var28.CheckRanking("1\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-90));
    var1.persistirDados(var28);
    java.lang.String var36 = var28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "1\u00BA - 1\u00BA - Nome: hi!| Pontuacao: 100 - 100 - -90"+ "'", var36.equals("1\u00BA - 1\u00BA - Nome: hi!| Pontuacao: 100 - 100 - -90"));

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    boolean var37 = var30.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", (java.lang.Integer)(-99));
    java.lang.String var38 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "1\u00BA -  - -12\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - -99"+ "'", var38.equals("1\u00BA -  - -12\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - -99"));

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.lang.String var18 = var17.toString();
    java.util.List var19 = var17.getRank();
    var8.persistirDados(var17);
    classes.Ranking var21 = var1.lerDados(var17);
    classes.Persistencia var23 = new classes.Persistencia("hi!");
    classes.Persistencia var25 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    classes.Ranking var33 = var27.lerDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    java.util.List var35 = var34.getRank();
    java.lang.String var36 = var34.toString();
    java.lang.String var37 = var34.toString();
    var27.persistirDados(var34);
    classes.Ranking var39 = var25.lerDados(var34);
    boolean var42 = var34.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var23.persistirDados(var34);
    java.util.List var44 = var34.getRank();
    boolean var47 = var34.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)(-1));
    java.util.List var48 = var34.getRank();
    var1.persistirDados(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var6 = var0.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    java.util.List var7 = var0.getRank();
    boolean var10 = var0.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)(-90));
    boolean var13 = var0.CheckRanking("1\u00BA - Nome: | Pontuacao: 2 - 2", (java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    java.lang.String var9 = var7.toString();
    var1.persistirDados(var7);
    classes.Persistencia var12 = new classes.Persistencia("hi!");
    classes.Persistencia var14 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var16 = new classes.Persistencia("");
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    var16.persistirDados(var17);
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    classes.Ranking var22 = var16.lerDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    var16.persistirDados(var23);
    classes.Ranking var28 = var14.lerDados(var23);
    java.lang.String var29 = var28.toString();
    classes.Ranking var30 = var12.lerDados(var28);
    var1.persistirDados(var30);
    classes.Persistencia var33 = new classes.Persistencia("hi!");
    classes.Ranking var34 = new classes.Ranking();
    boolean var37 = var34.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var40 = var34.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var41 = var33.lerDados(var34);
    var1.persistirDados(var41);
    java.lang.String var43 = var41.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: | Pontuacao: 2 - 22\u00BA -  - 11", 1);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    classes.Gamer var2 = new classes.Gamer("hi!", 10);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var5.toString();
    int var8 = var2.compareTo(var5);
    java.lang.String var9 = var5.getName();
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var12.getScore();
    java.lang.String var16 = var12.getName();
    java.lang.String var17 = var12.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    java.lang.String var23 = var20.getName();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.toString();
    int var28 = var26.getScore();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    int var32 = var26.compareTo(var31);
    int var33 = var20.compareTo(var26);
    int var34 = var12.compareTo(var20);
    int var35 = var12.getScore();
    int var36 = var5.compareTo(var12);
    java.lang.String var37 = var5.toString();
    classes.Gamer var40 = new classes.Gamer("hi!", 100);
    java.lang.String var41 = var40.toString();
    int var42 = var40.getScore();
    int var43 = var40.getScore();
    classes.Gamer var46 = new classes.Gamer("hi!", 100);
    int var47 = var46.getScore();
    int var48 = var46.getScore();
    int var49 = var40.compareTo(var46);
    int var50 = var40.getScore();
    java.lang.String var51 = var40.toString();
    int var52 = var5.compareTo(var40);
    java.lang.String var53 = var40.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var27.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var41.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var51.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    java.util.List var6 = var5.getRank();
    classes.Ranking var7 = var1.lerDados(var5);
    classes.Ranking var8 = new classes.Ranking();
    java.util.List var9 = var8.getRank();
    java.lang.String var10 = var8.toString();
    java.lang.String var11 = var8.toString();
    var1.persistirDados(var8);
    java.util.List var13 = var8.getRank();
    boolean var16 = var8.CheckRanking("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2", (java.lang.Integer)1);
    boolean var19 = var8.CheckRanking("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2", (java.lang.Integer)8910);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    java.util.List var36 = var30.getRank();
    classes.Ranking var37 = var1.lerDados(var30);
    java.lang.String var38 = var30.toString();
    boolean var41 = var30.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)(-100));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -1", (-989));

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("");
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    var15.persistirDados(var16);
    boolean var21 = var16.CheckRanking("", (java.lang.Integer)11);
    var1.persistirDados(var16);
    java.util.List var23 = var16.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    var39.persistirDados(var43);
    classes.Ranking var45 = var37.lerDados(var43);
    classes.Persistencia var47 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var49 = new classes.Persistencia("");
    classes.Ranking var50 = new classes.Ranking();
    java.util.List var51 = var50.getRank();
    var49.persistirDados(var50);
    classes.Ranking var53 = new classes.Ranking();
    java.util.List var54 = var53.getRank();
    classes.Ranking var55 = var49.lerDados(var53);
    classes.Ranking var56 = new classes.Ranking();
    java.util.List var57 = var56.getRank();
    java.lang.String var58 = var56.toString();
    java.lang.String var59 = var56.toString();
    var49.persistirDados(var56);
    classes.Ranking var61 = var47.lerDados(var56);
    java.util.List var62 = var56.getRank();
    classes.Ranking var63 = var37.lerDados(var56);
    var1.persistirDados(var56);
    java.util.List var65 = var56.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    java.lang.String var17 = var2.toString();
    int var18 = var2.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    java.lang.String var22 = var21.getName();
    int var23 = var21.getScore();
    int var24 = var21.getScore();
    java.lang.String var25 = var21.toString();
    int var26 = var2.compareTo(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    java.lang.String var12 = var7.toString();
    java.lang.String var13 = var7.toString();
    int var14 = var7.getScore();
    int var15 = var7.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11");

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    classes.Ranking var16 = new classes.Ranking();
    java.lang.String var17 = var16.toString();
    java.util.List var18 = var16.getRank();
    classes.Ranking var19 = var1.lerDados(var16);
    classes.Persistencia var21 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    var21.persistirDados(var29);
    java.lang.String var31 = var29.toString();
    java.lang.String var32 = var29.toString();
    classes.Ranking var33 = var1.lerDados(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    classes.Persistencia var36 = new classes.Persistencia("hi!");
    classes.Ranking var37 = new classes.Ranking();
    boolean var40 = var37.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var43 = var37.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var44 = var36.lerDados(var37);
    classes.Ranking var45 = var1.lerDados(var44);
    java.util.List var46 = var45.getRank();
    java.util.List var47 = var45.getRank();
    boolean var50 = var45.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)100);
    boolean var53 = var45.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -12\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - -99");

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    classes.Gamer var2 = new classes.Gamer("Nome: | Pontuacao: 10", (-11));

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    classes.Operator var3 = new classes.Operator(99, 11, 0);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 110);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var26 = new classes.Persistencia("");
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    var26.persistirDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var26.lerDados(var30);
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    java.lang.String var35 = var33.toString();
    java.lang.String var36 = var33.toString();
    var26.persistirDados(var33);
    classes.Ranking var38 = var24.lerDados(var33);
    classes.Ranking var39 = new classes.Ranking();
    java.lang.String var40 = var39.toString();
    java.util.List var41 = var39.getRank();
    classes.Ranking var42 = var24.lerDados(var39);
    classes.Ranking var43 = var1.lerDados(var39);
    boolean var46 = var43.CheckRanking("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100", (java.lang.Integer)88);
    java.util.List var47 = var43.getRank();
    java.lang.String var48 = var43.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "1\u00BA - Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100 - 88"+ "'", var48.equals("1\u00BA - Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100 - 88"));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    java.lang.String var69 = var66.toString();
    var59.persistirDados(var66);
    classes.Ranking var71 = var57.lerDados(var66);
    boolean var74 = var66.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var77 = var66.CheckRanking("", (java.lang.Integer)10);
    java.util.List var78 = var66.getRank();
    var1.persistirDados(var66);
    classes.Ranking var80 = new classes.Ranking();
    boolean var83 = var80.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var86 = var80.CheckRanking("hi!", (java.lang.Integer)10);
    classes.Ranking var87 = var1.lerDados(var80);
    boolean var90 = var87.CheckRanking("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99", (java.lang.Integer)(-99));
    java.util.List var91 = var87.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    java.lang.String var16 = var2.getName();
    classes.Gamer var19 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var22 = new classes.Gamer("hi!", 100);
    java.lang.String var23 = var22.toString();
    int var24 = var22.getScore();
    classes.Gamer var27 = new classes.Gamer("hi!", 100);
    int var28 = var22.compareTo(var27);
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    int var31 = var19.compareTo(var27);
    classes.Gamer var34 = new classes.Gamer("hi!", 100);
    java.lang.String var35 = var34.toString();
    int var36 = var19.compareTo(var34);
    int var37 = var2.compareTo(var19);
    int var38 = var19.getScore();
    java.lang.String var39 = var19.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var23.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var29.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var35.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "1\u00BA -  - -1"+ "'", var39.equals("1\u00BA -  - -1"));

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    java.util.List var20 = var17.getRank();
    java.lang.String var21 = var17.toString();
    java.util.List var22 = var17.getRank();
    java.util.List var23 = var17.getRank();
    boolean var26 = var17.CheckRanking("Nome: hi!| Pontuacao: 10", (java.lang.Integer)2);
    java.util.List var27 = var17.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - -1| Pontuacao: 100", (-101));

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    classes.Operator var3 = new classes.Operator(0, (-1), 0);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var7.getScore();
    int var9 = var7.getScore();
    java.lang.String var10 = var7.getName();
    java.lang.String var11 = var7.getName();
    int var12 = var7.getScore();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    java.lang.String var16 = var15.getName();
    java.lang.String var17 = var15.toString();
    int var18 = var15.getScore();
    java.lang.String var19 = var15.getName();
    java.lang.String var20 = var15.getName();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    java.lang.String var24 = var23.toString();
    int var25 = var23.getScore();
    java.lang.String var26 = var23.getName();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    classes.Gamer var34 = new classes.Gamer("hi!", 100);
    int var35 = var29.compareTo(var34);
    int var36 = var23.compareTo(var29);
    int var37 = var15.compareTo(var23);
    int var38 = var7.compareTo(var15);
    int var39 = var2.compareTo(var15);
    int var40 = var15.getScore();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    java.lang.String var44 = var43.toString();
    int var45 = var15.compareTo(var43);
    java.lang.String var46 = var43.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var24.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    classes.Ranking var0 = new classes.Ranking();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    boolean var5 = var0.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98", (java.lang.Integer)90);
    java.util.List var6 = var0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    classes.Ranking var6 = var3.lerDados(var4);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    java.lang.String var19 = var17.toString();
    var8.persistirDados(var17);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var8.lerDados(var21);
    var3.persistirDados(var21);
    classes.Ranking var25 = var1.lerDados(var21);
    java.util.List var26 = var25.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - 2 - 11");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.lang.String var13 = var12.toString();
    java.util.List var14 = var12.getRank();
    var3.persistirDados(var12);
    classes.Persistencia var17 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    var17.persistirDados(var25);
    java.lang.String var27 = var25.toString();
    classes.Ranking var28 = var3.lerDados(var25);
    classes.Persistencia var30 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var32 = new classes.Persistencia("");
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    var32.persistirDados(var33);
    classes.Ranking var36 = new classes.Ranking();
    var32.persistirDados(var36);
    classes.Persistencia var39 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var41 = new classes.Persistencia("");
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    var41.persistirDados(var42);
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    classes.Ranking var47 = var41.lerDados(var45);
    classes.Ranking var48 = new classes.Ranking();
    java.util.List var49 = var48.getRank();
    java.lang.String var50 = var48.toString();
    java.lang.String var51 = var48.toString();
    var41.persistirDados(var48);
    classes.Ranking var53 = var39.lerDados(var48);
    java.lang.String var54 = var48.toString();
    var32.persistirDados(var48);
    classes.Ranking var56 = var30.lerDados(var48);
    var3.persistirDados(var56);
    classes.Persistencia var59 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    classes.Ranking var62 = var59.lerDados(var60);
    java.lang.String var63 = var62.toString();
    classes.Ranking var64 = var3.lerDados(var62);
    classes.Ranking var65 = var1.lerDados(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    classes.Operator var3 = new classes.Operator((-1), 1, (-10));
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    java.lang.String var10 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    boolean var20 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var1.persistirDados(var12);
    classes.Persistencia var23 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var25 = new classes.Persistencia("");
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    var25.persistirDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var25.lerDados(var29);
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    java.lang.String var34 = var32.toString();
    java.lang.String var35 = var32.toString();
    var25.persistirDados(var32);
    classes.Ranking var37 = var23.lerDados(var32);
    boolean var40 = var32.CheckRanking("", (java.lang.Integer)1);
    classes.Ranking var41 = var1.lerDados(var32);
    classes.Persistencia var43 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var45 = new classes.Persistencia("hi!");
    classes.Ranking var46 = new classes.Ranking();
    boolean var49 = var46.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var52 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var53 = var45.lerDados(var46);
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    java.lang.String var56 = var54.toString();
    var45.persistirDados(var54);
    classes.Ranking var58 = new classes.Ranking();
    java.util.List var59 = var58.getRank();
    classes.Ranking var60 = var45.lerDados(var58);
    var43.persistirDados(var60);
    classes.Persistencia var63 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var65 = new classes.Persistencia("");
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    var65.persistirDados(var66);
    classes.Ranking var69 = new classes.Ranking();
    java.util.List var70 = var69.getRank();
    classes.Ranking var71 = var65.lerDados(var69);
    classes.Ranking var72 = new classes.Ranking();
    java.util.List var73 = var72.getRank();
    java.lang.String var74 = var72.toString();
    java.lang.String var75 = var72.toString();
    var65.persistirDados(var72);
    classes.Ranking var77 = var63.lerDados(var72);
    java.util.List var78 = var72.getRank();
    classes.Ranking var79 = var43.lerDados(var72);
    classes.Persistencia var81 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var83 = new classes.Persistencia("");
    classes.Ranking var84 = new classes.Ranking();
    java.util.List var85 = var84.getRank();
    var83.persistirDados(var84);
    classes.Ranking var87 = new classes.Ranking();
    java.util.List var88 = var87.getRank();
    classes.Ranking var89 = var83.lerDados(var87);
    var81.persistirDados(var89);
    java.lang.String var91 = var89.toString();
    java.lang.String var92 = var89.toString();
    boolean var95 = var89.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)2);
    var43.persistirDados(var89);
    java.lang.String var97 = var89.toString();
    var1.persistirDados(var89);
    java.lang.String var99 = var89.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "1\u00BA - Nome: | Pontuacao: 2 - 2"+ "'", var97.equals("1\u00BA - Nome: | Pontuacao: 2 - 2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "1\u00BA - Nome: | Pontuacao: 2 - 2"+ "'", var99.equals("1\u00BA - Nome: | Pontuacao: 2 - 2"));

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    classes.Operator var3 = new classes.Operator(2, 11, 8910);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var1.lerDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    java.lang.String var18 = var17.toString();
    java.util.List var19 = var17.getRank();
    boolean var22 = var17.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    classes.Ranking var23 = var1.lerDados(var17);
    classes.Persistencia var25 = new classes.Persistencia("");
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    var25.persistirDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var25.lerDados(var29);
    boolean var34 = var31.CheckRanking("", (java.lang.Integer)(-1));
    java.lang.String var35 = var31.toString();
    classes.Ranking var36 = var1.lerDados(var31);
    classes.Persistencia var38 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var40 = new classes.Persistencia("");
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    var40.persistirDados(var41);
    classes.Ranking var44 = new classes.Ranking();
    java.util.List var45 = var44.getRank();
    classes.Ranking var46 = var40.lerDados(var44);
    var38.persistirDados(var46);
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    boolean var52 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)1);
    var1.persistirDados(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "1\u00BA -  - -1"+ "'", var35.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var19.toString();
    int var22 = var19.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    java.lang.String var26 = var25.getName();
    int var27 = var25.getScore();
    int var28 = var19.compareTo(var25);
    java.lang.String var29 = var25.getName();
    int var30 = var12.compareTo(var25);
    java.lang.String var31 = var25.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    classes.Ranking var0 = new classes.Ranking();
    java.lang.String var1 = var0.toString();
    java.util.List var2 = var0.getRank();
    boolean var5 = var0.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    java.util.List var6 = var0.getRank();
    boolean var9 = var0.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98", (java.lang.Integer)(-90));
    boolean var12 = var0.CheckRanking("1\u00BA -  - 0", (java.lang.Integer)90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    classes.Persistencia var1 = new classes.Persistencia("Nome: | Pontuacao: -1");
    classes.Persistencia var3 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    var3.persistirDados(var11);
    classes.Ranking var13 = new classes.Ranking();
    boolean var16 = var13.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var19 = var13.CheckRanking("hi!", (java.lang.Integer)10);
    var3.persistirDados(var13);
    java.lang.String var21 = var13.toString();
    classes.Ranking var22 = var1.lerDados(var13);
    java.util.List var23 = var13.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10"+ "'", var21.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    classes.Persistencia var1 = new classes.Persistencia("Nome: | Pontuacao: -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    var5.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    java.lang.String var27 = var21.toString();
    var5.persistirDados(var21);
    classes.Ranking var29 = var3.lerDados(var21);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    java.lang.String var35 = var32.toString();
    java.util.List var36 = var32.getRank();
    classes.Ranking var37 = var3.lerDados(var32);
    var1.persistirDados(var32);
    boolean var41 = var32.CheckRanking("Nome: hi!| Pontuacao: 0", (java.lang.Integer)2);
    java.lang.String var42 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "1\u00BA - Nome: hi!| Pontuacao: 0 - 2"+ "'", var42.equals("1\u00BA - Nome: hi!| Pontuacao: 0 - 2"));

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    classes.Operator var3 = new classes.Operator(88, (-99), (-90));

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Persistencia var25 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    classes.Ranking var33 = var27.lerDados(var31);
    var25.persistirDados(var33);
    java.lang.String var35 = var33.toString();
    classes.Ranking var36 = var11.lerDados(var33);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Persistencia var40 = new classes.Persistencia("hi!");
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var48 = var40.lerDados(var41);
    var38.persistirDados(var41);
    classes.Ranking var50 = var11.lerDados(var41);
    classes.Ranking var51 = var1.lerDados(var41);
    classes.Persistencia var53 = new classes.Persistencia("hi!");
    classes.Ranking var54 = new classes.Ranking();
    boolean var57 = var54.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var60 = var54.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var61 = var53.lerDados(var54);
    classes.Ranking var62 = new classes.Ranking();
    java.lang.String var63 = var62.toString();
    java.util.List var64 = var62.getRank();
    var53.persistirDados(var62);
    classes.Ranking var66 = new classes.Ranking();
    boolean var69 = var66.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var72 = var66.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var73 = var66.getRank();
    var53.persistirDados(var66);
    classes.Ranking var75 = var1.lerDados(var66);
    java.lang.String var76 = var66.toString();
    java.lang.String var77 = var66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var76.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var77.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    classes.Operator var3 = new classes.Operator(2, (-2), (-99));

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    classes.Gamer var2 = new classes.Gamer("Nome: | Pontuacao: -1", (-90));
    classes.Gamer var5 = new classes.Gamer("Nome: | Pontuacao: 10", 10);
    int var6 = var2.compareTo(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    int var10 = var2.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.getName();
    int var20 = var18.getScore();
    int var21 = var18.getScore();
    int var22 = var13.compareTo(var18);
    int var23 = var2.compareTo(var13);
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var26.toString();
    int var29 = var26.getScore();
    java.lang.String var30 = var26.getName();
    classes.Gamer var33 = new classes.Gamer("", 10);
    int var34 = var26.compareTo(var33);
    java.lang.String var35 = var26.toString();
    classes.Gamer var38 = new classes.Gamer("hi!", 100);
    java.lang.String var39 = var38.toString();
    int var40 = var38.getScore();
    java.lang.String var41 = var38.getName();
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    classes.Gamer var49 = new classes.Gamer("hi!", 100);
    int var50 = var44.compareTo(var49);
    int var51 = var38.compareTo(var44);
    int var52 = var38.getScore();
    classes.Gamer var55 = new classes.Gamer("hi!", 100);
    java.lang.String var56 = var55.getName();
    int var57 = var55.getScore();
    classes.Gamer var60 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var61 = var55.compareTo(var60);
    int var62 = var38.compareTo(var55);
    int var63 = var26.compareTo(var38);
    int var64 = var13.compareTo(var26);
    java.lang.String var65 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var28.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var35.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var65.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    classes.Operator var3 = new classes.Operator((-1), 99, 0);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 98);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    int var16 = var10.compareTo(var15);
    java.lang.String var17 = var15.toString();
    java.lang.String var18 = var15.toString();
    int var19 = var7.compareTo(var15);
    int var20 = var2.compareTo(var7);
    int var21 = var7.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var18.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - -1", 98);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    classes.Ranking var17 = var11.lerDados(var15);
    boolean var20 = var17.CheckRanking("", (java.lang.Integer)(-1));
    java.lang.String var21 = var17.toString();
    classes.Ranking var22 = var1.lerDados(var17);
    boolean var25 = var17.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", (java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA -  - -1"+ "'", var21.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - -1 - 100");

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - -99", (-100));

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    java.lang.String var9 = var7.toString();
    var1.persistirDados(var7);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("hi!");
    classes.Ranking var15 = new classes.Ranking();
    boolean var18 = var15.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var21 = var15.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var22 = var14.lerDados(var15);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    java.lang.String var25 = var23.toString();
    var14.persistirDados(var23);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var14.lerDados(var27);
    var12.persistirDados(var29);
    classes.Persistencia var32 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    classes.Ranking var40 = var34.lerDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    var34.persistirDados(var41);
    classes.Ranking var46 = var32.lerDados(var41);
    java.util.List var47 = var41.getRank();
    classes.Ranking var48 = var12.lerDados(var41);
    java.lang.String var49 = var41.toString();
    java.lang.String var50 = var41.toString();
    java.util.List var51 = var41.getRank();
    var1.persistirDados(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var19.toString();
    int var22 = var19.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    java.lang.String var26 = var25.getName();
    int var27 = var25.getScore();
    int var28 = var19.compareTo(var25);
    java.lang.String var29 = var25.getName();
    int var30 = var12.compareTo(var25);
    int var31 = var25.getScore();
    classes.Gamer var34 = new classes.Gamer("hi!", 10);
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.getName();
    java.lang.String var39 = var37.toString();
    int var40 = var34.compareTo(var37);
    java.lang.String var41 = var37.getName();
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var44.toString();
    int var47 = var44.getScore();
    java.lang.String var48 = var44.getName();
    java.lang.String var49 = var44.getName();
    classes.Gamer var52 = new classes.Gamer("hi!", 100);
    java.lang.String var53 = var52.toString();
    int var54 = var52.getScore();
    java.lang.String var55 = var52.getName();
    classes.Gamer var58 = new classes.Gamer("hi!", 100);
    java.lang.String var59 = var58.toString();
    int var60 = var58.getScore();
    classes.Gamer var63 = new classes.Gamer("hi!", 100);
    int var64 = var58.compareTo(var63);
    int var65 = var52.compareTo(var58);
    int var66 = var44.compareTo(var52);
    int var67 = var44.getScore();
    int var68 = var37.compareTo(var44);
    int var69 = var37.getScore();
    int var70 = var25.compareTo(var37);
    int var71 = var25.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var46.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var53.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var59.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 100);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    boolean var13 = var10.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var16 = var10.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var1.persistirDados(var10);
    classes.Persistencia var19 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    classes.Ranking var22 = var19.lerDados(var20);
    classes.Persistencia var24 = new classes.Persistencia("hi!");
    classes.Ranking var25 = new classes.Ranking();
    boolean var28 = var25.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var31 = var25.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var32 = var24.lerDados(var25);
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    java.lang.String var35 = var33.toString();
    var24.persistirDados(var33);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    classes.Ranking var39 = var24.lerDados(var37);
    var19.persistirDados(var37);
    classes.Persistencia var42 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var44 = new classes.Persistencia("");
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    var44.persistirDados(var45);
    classes.Ranking var48 = new classes.Ranking();
    java.util.List var49 = var48.getRank();
    classes.Ranking var50 = var44.lerDados(var48);
    classes.Ranking var51 = new classes.Ranking();
    java.util.List var52 = var51.getRank();
    java.lang.String var53 = var51.toString();
    java.lang.String var54 = var51.toString();
    var44.persistirDados(var51);
    classes.Ranking var56 = var42.lerDados(var51);
    boolean var59 = var51.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var62 = var51.CheckRanking("", (java.lang.Integer)10);
    classes.Ranking var63 = var19.lerDados(var51);
    classes.Persistencia var65 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var67 = new classes.Persistencia("");
    classes.Ranking var68 = new classes.Ranking();
    java.util.List var69 = var68.getRank();
    var67.persistirDados(var68);
    classes.Ranking var71 = new classes.Ranking();
    java.util.List var72 = var71.getRank();
    classes.Ranking var73 = var67.lerDados(var71);
    classes.Ranking var74 = new classes.Ranking();
    java.util.List var75 = var74.getRank();
    java.lang.String var76 = var74.toString();
    java.lang.String var77 = var74.toString();
    var67.persistirDados(var74);
    classes.Ranking var79 = var65.lerDados(var74);
    java.lang.String var80 = var74.toString();
    var19.persistirDados(var74);
    classes.Ranking var82 = var1.lerDados(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    classes.Operator var3 = new classes.Operator(88, 98, 89);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    classes.Ranking var6 = var3.lerDados(var4);
    java.lang.String var7 = var6.toString();
    java.util.List var8 = var6.getRank();
    var1.persistirDados(var6);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var13 = new classes.Persistencia("");
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    var13.persistirDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    classes.Ranking var19 = var13.lerDados(var17);
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    java.lang.String var22 = var20.toString();
    java.lang.String var23 = var20.toString();
    var13.persistirDados(var20);
    classes.Ranking var25 = var11.lerDados(var20);
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    var27.persistirDados(var31);
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    java.lang.String var35 = var33.toString();
    var27.persistirDados(var33);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Persistencia var40 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var42 = new classes.Persistencia("");
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    var42.persistirDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    classes.Ranking var48 = var42.lerDados(var46);
    classes.Ranking var49 = new classes.Ranking();
    java.util.List var50 = var49.getRank();
    java.lang.String var51 = var49.toString();
    java.lang.String var52 = var49.toString();
    var42.persistirDados(var49);
    classes.Ranking var54 = var40.lerDados(var49);
    java.lang.String var55 = var54.toString();
    classes.Ranking var56 = var38.lerDados(var54);
    var27.persistirDados(var56);
    java.lang.String var58 = var56.toString();
    classes.Ranking var59 = var11.lerDados(var56);
    var1.persistirDados(var56);
    classes.Persistencia var62 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var64 = new classes.Persistencia("");
    classes.Ranking var65 = new classes.Ranking();
    java.util.List var66 = var65.getRank();
    var64.persistirDados(var65);
    classes.Ranking var68 = new classes.Ranking();
    var64.persistirDados(var68);
    classes.Ranking var70 = var62.lerDados(var68);
    classes.Persistencia var72 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var74 = new classes.Persistencia("");
    classes.Ranking var75 = new classes.Ranking();
    java.util.List var76 = var75.getRank();
    var74.persistirDados(var75);
    classes.Ranking var78 = new classes.Ranking();
    java.util.List var79 = var78.getRank();
    classes.Ranking var80 = var74.lerDados(var78);
    classes.Ranking var81 = new classes.Ranking();
    java.util.List var82 = var81.getRank();
    java.lang.String var83 = var81.toString();
    java.lang.String var84 = var81.toString();
    var74.persistirDados(var81);
    classes.Ranking var86 = var72.lerDados(var81);
    java.util.List var87 = var81.getRank();
    classes.Ranking var88 = var62.lerDados(var81);
    java.util.List var89 = var81.getRank();
    classes.Ranking var90 = var1.lerDados(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    classes.Operator var3 = new classes.Operator(0, (-1), 10);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0", (-2));
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0| Pontuacao: -2"+ "'", var3.equals("Nome: 1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0| Pontuacao: -2"));

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    classes.Operator var3 = new classes.Operator((-99), 98, (-11));

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    classes.Operator var3 = new classes.Operator((-99), 1089, 2);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    boolean var18 = var10.CheckRanking("", (java.lang.Integer)1);
    boolean var21 = var10.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0", (java.lang.Integer)2);
    java.lang.String var22 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "1\u00BA -  - 12\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0 - 2"+ "'", var22.equals("1\u00BA -  - 12\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0 - 2"));

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("hi!");
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    boolean var29 = var21.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var10.persistirDados(var21);
    java.lang.String var31 = var21.toString();
    classes.Ranking var32 = var3.lerDados(var21);
    classes.Ranking var33 = var1.lerDados(var32);
    classes.Persistencia var35 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var51.toString();
    classes.Ranking var53 = var35.lerDados(var51);
    java.util.List var54 = var51.getRank();
    java.util.List var55 = var51.getRank();
    classes.Ranking var56 = var1.lerDados(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var31.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    java.util.List var35 = var34.getRank();
    classes.Ranking var36 = var30.lerDados(var34);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    java.lang.String var39 = var37.toString();
    java.lang.String var40 = var37.toString();
    var30.persistirDados(var37);
    classes.Ranking var42 = var28.lerDados(var37);
    java.lang.String var43 = var42.toString();
    var1.persistirDados(var42);
    classes.Persistencia var46 = new classes.Persistencia("");
    classes.Ranking var47 = new classes.Ranking();
    boolean var50 = var47.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var51 = var47.getRank();
    java.util.List var52 = var47.getRank();
    var46.persistirDados(var47);
    classes.Persistencia var55 = new classes.Persistencia("");
    classes.Ranking var56 = new classes.Ranking();
    java.util.List var57 = var56.getRank();
    var55.persistirDados(var56);
    classes.Ranking var59 = new classes.Ranking();
    var55.persistirDados(var59);
    classes.Ranking var61 = new classes.Ranking();
    java.util.List var62 = var61.getRank();
    java.lang.String var63 = var61.toString();
    var55.persistirDados(var61);
    classes.Ranking var65 = var46.lerDados(var61);
    boolean var68 = var65.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-90));
    boolean var71 = var65.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)(-1));
    java.util.List var72 = var65.getRank();
    var1.persistirDados(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    int var10 = var2.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.getName();
    int var20 = var18.getScore();
    int var21 = var18.getScore();
    int var22 = var13.compareTo(var18);
    int var23 = var2.compareTo(var13);
    int var24 = var2.getScore();
    java.lang.String var25 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "1\u00BA -  - -1"+ "'", var25.equals("1\u00BA -  - -1"));

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var8 = new classes.Persistencia("");
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    var8.persistirDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    var8.persistirDados(var12);
    classes.Persistencia var15 = new classes.Persistencia("hi!");
    classes.Persistencia var17 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    java.lang.String var29 = var26.toString();
    var19.persistirDados(var26);
    classes.Ranking var31 = var17.lerDados(var26);
    boolean var34 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var15.persistirDados(var26);
    java.lang.String var36 = var26.toString();
    classes.Ranking var37 = var8.lerDados(var26);
    classes.Ranking var38 = var6.lerDados(var37);
    classes.Persistencia var40 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var42 = new classes.Persistencia("");
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    var42.persistirDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    classes.Ranking var48 = var42.lerDados(var46);
    var40.persistirDados(var48);
    classes.Ranking var50 = new classes.Ranking();
    boolean var53 = var50.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var56 = var50.CheckRanking("hi!", (java.lang.Integer)10);
    var40.persistirDados(var50);
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    var40.persistirDados(var65);
    classes.Ranking var67 = var6.lerDados(var65);
    var1.persistirDados(var65);
    classes.Persistencia var70 = new classes.Persistencia("");
    classes.Ranking var71 = new classes.Ranking();
    java.util.List var72 = var71.getRank();
    var70.persistirDados(var71);
    classes.Ranking var74 = new classes.Ranking();
    java.util.List var75 = var74.getRank();
    classes.Ranking var76 = var70.lerDados(var74);
    boolean var79 = var76.CheckRanking("", (java.lang.Integer)(-1));
    java.lang.String var80 = var76.toString();
    classes.Ranking var81 = var1.lerDados(var76);
    boolean var84 = var81.CheckRanking("1\u00BA -  - 0", (java.lang.Integer)1089);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var36.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "1\u00BA -  - -1"+ "'", var80.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    classes.Operator var3 = new classes.Operator(98, 989, 10);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    java.util.List var20 = var17.getRank();
    java.lang.String var21 = var17.toString();
    java.util.List var22 = var17.getRank();
    java.lang.String var23 = var17.toString();
    java.lang.String var24 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    boolean var18 = var10.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var21 = var10.CheckRanking("", (java.lang.Integer)10);
    boolean var24 = var10.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100", (java.lang.Integer)89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    classes.Operator var3 = new classes.Operator(101, (-99), 88);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    classes.Operator var3 = new classes.Operator(89, 88, (-11));

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 104\u00BA - Nome: hi!| Pontuacao: 100 - 1089", 2);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    java.lang.String var25 = var2.getName();
    java.lang.String var26 = var2.getName();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    int var31 = var2.compareTo(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    classes.Operator var3 = new classes.Operator(88, (-989), (-989));
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98", (-99));
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98| Pontuacao: -99"+ "'", var3.equals("Nome: 1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98| Pontuacao: -99"));

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    int var11 = var2.getScore();
    classes.Gamer var14 = new classes.Gamer("hi!", 10);
    classes.Gamer var17 = new classes.Gamer("hi!", 100);
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var17.toString();
    int var20 = var14.compareTo(var17);
    java.lang.String var21 = var17.getName();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = var24.toString();
    int var27 = var24.getScore();
    java.lang.String var28 = var24.getName();
    java.lang.String var29 = var24.getName();
    classes.Gamer var32 = new classes.Gamer("hi!", 100);
    java.lang.String var33 = var32.toString();
    int var34 = var32.getScore();
    java.lang.String var35 = var32.getName();
    classes.Gamer var38 = new classes.Gamer("hi!", 100);
    java.lang.String var39 = var38.toString();
    int var40 = var38.getScore();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    int var44 = var38.compareTo(var43);
    int var45 = var32.compareTo(var38);
    int var46 = var24.compareTo(var32);
    int var47 = var24.getScore();
    int var48 = var17.compareTo(var24);
    int var49 = var2.compareTo(var24);
    int var50 = var24.getScore();
    classes.Gamer var53 = new classes.Gamer("hi!", 10);
    java.lang.String var54 = var53.toString();
    int var55 = var24.compareTo(var53);
    java.lang.String var56 = var24.getName();
    int var57 = var24.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var26.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Nome: hi!| Pontuacao: 10"+ "'", var54.equals("Nome: hi!| Pontuacao: 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 100);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    java.lang.String var19 = var17.toString();
    var8.persistirDados(var17);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var8.lerDados(var21);
    var6.persistirDados(var23);
    var1.persistirDados(var23);
    java.lang.String var26 = var23.toString();
    java.lang.String var27 = var23.toString();
    boolean var30 = var23.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)(-989));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 1003\u00BA - 1\u00BA -  - -1 - 14\u00BA - 1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98 - 11", 2);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    classes.Operator var3 = new classes.Operator(2, 98, 101);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", 2);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1"+ "'", var3.equals("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1", 989);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - 0", (-101));

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    classes.Operator var3 = new classes.Operator(10, 10, 10);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    int var7 = var3.getResult();
    int var8 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("hi!");
    classes.Persistencia var17 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    java.lang.String var29 = var26.toString();
    var19.persistirDados(var26);
    classes.Ranking var31 = var17.lerDados(var26);
    boolean var34 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var15.persistirDados(var26);
    classes.Ranking var36 = var1.lerDados(var26);
    boolean var39 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)100);
    java.util.List var40 = var26.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var6 = var2.getRank();
    java.util.List var7 = var2.getRank();
    var1.persistirDados(var2);
    boolean var11 = var2.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", (java.lang.Integer)2);
    java.util.List var12 = var2.getRank();
    boolean var15 = var2.CheckRanking("Nome: 1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98| Pontuacao: -99", (java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    java.lang.String var17 = var12.getName();
    java.lang.String var18 = var12.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("");
    classes.Ranking var22 = new classes.Ranking();
    java.util.List var23 = var22.getRank();
    var21.persistirDados(var22);
    classes.Ranking var25 = new classes.Ranking();
    var21.persistirDados(var25);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    java.util.List var35 = var34.getRank();
    classes.Ranking var36 = var30.lerDados(var34);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    java.lang.String var39 = var37.toString();
    java.lang.String var40 = var37.toString();
    var30.persistirDados(var37);
    classes.Ranking var42 = var28.lerDados(var37);
    java.lang.String var43 = var37.toString();
    var21.persistirDados(var37);
    boolean var47 = var37.CheckRanking("1\u00BA -  - 2", (java.lang.Integer)11);
    classes.Ranking var48 = var1.lerDados(var37);
    java.util.List var49 = var48.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    classes.Gamer var2 = new classes.Gamer("hi!", 10);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var5.toString();
    int var8 = var2.compareTo(var5);
    java.lang.String var9 = var5.getName();
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var12.getScore();
    java.lang.String var16 = var12.getName();
    java.lang.String var17 = var12.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    java.lang.String var23 = var20.getName();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.toString();
    int var28 = var26.getScore();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    int var32 = var26.compareTo(var31);
    int var33 = var20.compareTo(var26);
    int var34 = var12.compareTo(var20);
    int var35 = var12.getScore();
    int var36 = var5.compareTo(var12);
    java.lang.String var37 = var12.getName();
    classes.Gamer var40 = new classes.Gamer("hi!", 100);
    java.lang.String var41 = var40.toString();
    int var42 = var40.getScore();
    java.lang.String var43 = var40.getName();
    classes.Gamer var46 = new classes.Gamer("hi!", 100);
    java.lang.String var47 = var46.toString();
    int var48 = var46.getScore();
    classes.Gamer var51 = new classes.Gamer("hi!", 100);
    int var52 = var46.compareTo(var51);
    int var53 = var40.compareTo(var46);
    classes.Gamer var56 = new classes.Gamer("hi!", 100);
    java.lang.String var57 = var56.toString();
    int var58 = var56.getScore();
    classes.Gamer var61 = new classes.Gamer("hi!", 100);
    int var62 = var56.compareTo(var61);
    java.lang.String var63 = var61.toString();
    int var64 = var40.compareTo(var61);
    int var65 = var12.compareTo(var40);
    classes.Gamer var68 = new classes.Gamer("hi!", 100);
    java.lang.String var69 = var68.getName();
    java.lang.String var70 = var68.toString();
    classes.Gamer var73 = new classes.Gamer("hi!", 100);
    java.lang.String var74 = var73.getName();
    java.lang.String var75 = var73.toString();
    int var76 = var73.getScore();
    int var77 = var68.compareTo(var73);
    java.lang.String var78 = var73.toString();
    java.lang.String var79 = var73.toString();
    int var80 = var73.getScore();
    java.lang.String var81 = var73.toString();
    java.lang.String var82 = var73.toString();
    int var83 = var40.compareTo(var73);
    java.lang.String var84 = var73.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var27.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var41.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var47.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var57.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var63.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var70.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var75.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var78.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var79.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var81.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var82.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var84.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - Nome: hi!| Pontuacao: 100 - 1002\u00BA - Nome: | Pontuacao: 2 - 2");

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    var39.persistirDados(var43);
    classes.Ranking var45 = var37.lerDados(var43);
    classes.Persistencia var47 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var49 = new classes.Persistencia("");
    classes.Ranking var50 = new classes.Ranking();
    java.util.List var51 = var50.getRank();
    var49.persistirDados(var50);
    classes.Ranking var53 = new classes.Ranking();
    java.util.List var54 = var53.getRank();
    classes.Ranking var55 = var49.lerDados(var53);
    classes.Ranking var56 = new classes.Ranking();
    java.util.List var57 = var56.getRank();
    java.lang.String var58 = var56.toString();
    java.lang.String var59 = var56.toString();
    var49.persistirDados(var56);
    classes.Ranking var61 = var47.lerDados(var56);
    java.util.List var62 = var56.getRank();
    classes.Ranking var63 = var37.lerDados(var56);
    var1.persistirDados(var56);
    java.lang.String var65 = var56.toString();
    java.util.List var66 = var56.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    classes.Gamer var30 = new classes.Gamer("hi!", 100);
    java.lang.String var31 = var30.toString();
    int var32 = var30.getScore();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    int var36 = var30.compareTo(var35);
    java.lang.String var37 = var35.toString();
    int var38 = var14.compareTo(var35);
    classes.Gamer var41 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    java.lang.String var47 = var44.getName();
    int var48 = var41.compareTo(var44);
    int var49 = var41.getScore();
    int var50 = var14.compareTo(var41);
    int var51 = var7.compareTo(var41);
    classes.Gamer var54 = new classes.Gamer("hi!", 100);
    java.lang.String var55 = var54.toString();
    int var56 = var54.getScore();
    java.lang.String var57 = var54.getName();
    classes.Gamer var60 = new classes.Gamer("hi!", 100);
    java.lang.String var61 = var60.toString();
    int var62 = var60.getScore();
    classes.Gamer var65 = new classes.Gamer("hi!", 100);
    int var66 = var60.compareTo(var65);
    int var67 = var54.compareTo(var60);
    classes.Gamer var70 = new classes.Gamer("hi!", 100);
    java.lang.String var71 = var70.toString();
    int var72 = var70.getScore();
    classes.Gamer var75 = new classes.Gamer("hi!", 100);
    int var76 = var70.compareTo(var75);
    java.lang.String var77 = var75.toString();
    int var78 = var54.compareTo(var75);
    int var79 = var41.compareTo(var54);
    classes.Gamer var82 = new classes.Gamer("hi!", 100);
    java.lang.String var83 = var82.getName();
    java.lang.String var84 = var82.toString();
    int var85 = var82.getScore();
    java.lang.String var86 = var82.getName();
    classes.Gamer var89 = new classes.Gamer("hi!", 10);
    classes.Gamer var92 = new classes.Gamer("hi!", 100);
    java.lang.String var93 = var92.getName();
    java.lang.String var94 = var92.toString();
    int var95 = var89.compareTo(var92);
    int var96 = var82.compareTo(var92);
    java.lang.String var97 = var92.toString();
    int var98 = var41.compareTo(var92);
    java.lang.String var99 = var92.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var55.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var61.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var71.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var77.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var84.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "hi!"+ "'", var93.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var94.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var97.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "hi!"+ "'", var99.equals("hi!"));

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    classes.Operator var3 = new classes.Operator((-101), (-101), 89);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    classes.Operator var3 = new classes.Operator(2, (-90), (-1));
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    java.lang.String var10 = var2.toString();
    boolean var13 = var2.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)1);
    java.util.List var14 = var2.getRank();
    boolean var17 = var2.CheckRanking("1\u00BA -  - 2", (java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var10.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    java.lang.String var11 = var9.toString();
    java.lang.String var12 = var9.toString();
    java.lang.String var13 = var9.toString();
    boolean var16 = var9.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    java.lang.String var35 = var30.toString();
    boolean var38 = var30.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98", (java.lang.Integer)99);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "1\u00BA -  - -1"+ "'", var35.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    classes.Gamer var2 = new classes.Gamer("", (-1));
    java.lang.String var3 = var2.toString();
    classes.Gamer var6 = new classes.Gamer("hi!", (-1));
    int var7 = var2.compareTo(var6);
    classes.Gamer var10 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    int var15 = var13.getScore();
    java.lang.String var16 = var13.getName();
    int var17 = var10.compareTo(var13);
    int var18 = var10.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.getName();
    int var28 = var26.getScore();
    int var29 = var26.getScore();
    int var30 = var21.compareTo(var26);
    int var31 = var10.compareTo(var21);
    int var32 = var2.compareTo(var10);
    java.lang.String var33 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: | Pontuacao: -1"+ "'", var3.equals("Nome: | Pontuacao: -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var22.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var23.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: | Pontuacao: -1"+ "'", var33.equals("Nome: | Pontuacao: -1"));

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    classes.Gamer var30 = new classes.Gamer("hi!", 100);
    java.lang.String var31 = var30.toString();
    int var32 = var30.getScore();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    int var36 = var30.compareTo(var35);
    java.lang.String var37 = var35.toString();
    int var38 = var14.compareTo(var35);
    classes.Gamer var41 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    java.lang.String var47 = var44.getName();
    int var48 = var41.compareTo(var44);
    int var49 = var41.getScore();
    int var50 = var14.compareTo(var41);
    int var51 = var7.compareTo(var41);
    java.lang.String var52 = var41.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var37.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "1\u00BA -  - -1"+ "'", var52.equals("1\u00BA -  - -1"));

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    java.lang.String var12 = var7.toString();
    java.lang.String var13 = var7.toString();
    java.lang.String var14 = var7.getName();
    classes.Gamer var17 = new classes.Gamer("1\u00BA -  - 2", 1);
    java.lang.String var18 = var17.getName();
    java.lang.String var19 = var17.toString();
    int var20 = var7.compareTo(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "1\u00BA -  - 2"+ "'", var18.equals("1\u00BA -  - 2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: 1\u00BA -  - 2| Pontuacao: 1"+ "'", var19.equals("Nome: 1\u00BA -  - 2| Pontuacao: 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-99));

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 99);
    int var3 = var2.getScore();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 99);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99"+ "'", var4.equals("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var5.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99"+ "'", var6.equals("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99"));

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA -  - 2| Pontuacao: 1", (-99));
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    classes.Gamer var11 = new classes.Gamer("hi!", 100);
    java.lang.String var12 = var11.toString();
    int var13 = var11.getScore();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    int var17 = var11.compareTo(var16);
    int var18 = var5.compareTo(var11);
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    java.lang.String var22 = var21.toString();
    int var23 = var21.getScore();
    int var24 = var11.compareTo(var21);
    java.lang.String var25 = var11.toString();
    java.lang.String var26 = var11.toString();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    int var32 = var29.getScore();
    java.lang.String var33 = var29.getName();
    classes.Gamer var36 = new classes.Gamer("", 10);
    int var37 = var29.compareTo(var36);
    java.lang.String var38 = var29.toString();
    classes.Gamer var41 = new classes.Gamer("hi!", 100);
    java.lang.String var42 = var41.toString();
    int var43 = var41.getScore();
    java.lang.String var44 = var41.getName();
    classes.Gamer var47 = new classes.Gamer("hi!", 100);
    java.lang.String var48 = var47.toString();
    int var49 = var47.getScore();
    classes.Gamer var52 = new classes.Gamer("hi!", 100);
    int var53 = var47.compareTo(var52);
    int var54 = var41.compareTo(var47);
    int var55 = var41.getScore();
    classes.Gamer var58 = new classes.Gamer("hi!", 100);
    java.lang.String var59 = var58.getName();
    int var60 = var58.getScore();
    classes.Gamer var63 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var64 = var58.compareTo(var63);
    int var65 = var41.compareTo(var58);
    int var66 = var29.compareTo(var41);
    int var67 = var29.getScore();
    int var68 = var11.compareTo(var29);
    java.lang.String var69 = var29.toString();
    int var70 = var2.compareTo(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var22.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var26.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var42.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var48.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var69.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 199);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    int var24 = var18.compareTo(var23);
    java.lang.String var25 = var23.toString();
    int var26 = var2.compareTo(var23);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    int var32 = var29.getScore();
    java.lang.String var33 = var29.getName();
    java.lang.String var34 = var29.getName();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.toString();
    int var39 = var37.getScore();
    java.lang.String var40 = var37.getName();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    java.lang.String var44 = var43.toString();
    int var45 = var43.getScore();
    classes.Gamer var48 = new classes.Gamer("hi!", 100);
    int var49 = var43.compareTo(var48);
    int var50 = var37.compareTo(var43);
    int var51 = var29.compareTo(var37);
    classes.Gamer var54 = new classes.Gamer("1\u00BA -  - 2", 1);
    int var55 = var29.compareTo(var54);
    int var56 = var2.compareTo(var29);
    int var57 = var2.getScore();
    int var58 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 100);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Persistencia var25 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    classes.Ranking var33 = var27.lerDados(var31);
    var25.persistirDados(var33);
    java.lang.String var35 = var33.toString();
    classes.Ranking var36 = var11.lerDados(var33);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Persistencia var40 = new classes.Persistencia("hi!");
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var48 = var40.lerDados(var41);
    var38.persistirDados(var41);
    classes.Ranking var50 = var11.lerDados(var41);
    classes.Ranking var51 = var1.lerDados(var41);
    classes.Persistencia var53 = new classes.Persistencia("hi!");
    classes.Ranking var54 = new classes.Ranking();
    boolean var57 = var54.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var60 = var54.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var61 = var53.lerDados(var54);
    classes.Ranking var62 = new classes.Ranking();
    java.lang.String var63 = var62.toString();
    java.util.List var64 = var62.getRank();
    var53.persistirDados(var62);
    classes.Ranking var66 = new classes.Ranking();
    boolean var69 = var66.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var72 = var66.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var73 = var66.getRank();
    var53.persistirDados(var66);
    classes.Ranking var75 = var1.lerDados(var66);
    boolean var78 = var66.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0", (java.lang.Integer)8910);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Ranking var9 = var1.lerDados(var7);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var13 = new classes.Persistencia("");
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    var13.persistirDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    var13.persistirDados(var17);
    classes.Ranking var19 = var11.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    java.util.List var36 = var30.getRank();
    classes.Ranking var37 = var11.lerDados(var30);
    classes.Ranking var38 = var1.lerDados(var30);
    classes.Persistencia var40 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var42 = new classes.Persistencia("");
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    var42.persistirDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    classes.Ranking var48 = var42.lerDados(var46);
    classes.Ranking var49 = new classes.Ranking();
    java.util.List var50 = var49.getRank();
    java.lang.String var51 = var49.toString();
    java.lang.String var52 = var49.toString();
    var42.persistirDados(var49);
    classes.Ranking var54 = var40.lerDados(var49);
    java.lang.String var55 = var54.toString();
    classes.Ranking var56 = var1.lerDados(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    java.lang.String var35 = var34.toString();
    java.util.List var36 = var34.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    classes.Operator var3 = new classes.Operator((-100), 88, (-101));
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    classes.Operator var3 = new classes.Operator(0, 90, 2);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - -1 - 100", 199);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    classes.Operator var3 = new classes.Operator(90, 99, 2);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 8910);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 8910);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 8910);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    classes.Ranking var16 = new classes.Ranking();
    boolean var19 = var16.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    var1.persistirDados(var16);
    classes.Ranking var21 = new classes.Ranking();
    boolean var24 = var21.CheckRanking("hi!", (java.lang.Integer)0);
    classes.Ranking var25 = var1.lerDados(var21);
    java.lang.String var26 = var25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    classes.Gamer var2 = new classes.Gamer("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99", 97);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1 - 11", (-1));
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    int var8 = var5.getScore();
    classes.Gamer var11 = new classes.Gamer("hi!", 100);
    int var12 = var11.getScore();
    int var13 = var11.getScore();
    int var14 = var5.compareTo(var11);
    java.lang.String var15 = var5.getName();
    java.lang.String var16 = var5.getName();
    int var17 = var2.compareTo(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 101);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    java.lang.String var28 = var25.toString();
    java.lang.String var29 = var25.toString();
    classes.Ranking var30 = var1.lerDados(var25);
    classes.Persistencia var32 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    classes.Ranking var40 = var34.lerDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    java.lang.String var43 = var41.toString();
    java.lang.String var44 = var41.toString();
    var34.persistirDados(var41);
    classes.Ranking var46 = var32.lerDados(var41);
    boolean var49 = var41.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var52 = var41.CheckRanking("", (java.lang.Integer)10);
    java.util.List var53 = var41.getRank();
    boolean var56 = var41.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)0);
    var1.persistirDados(var41);
    classes.Ranking var58 = new classes.Ranking();
    java.lang.String var59 = var58.toString();
    var1.persistirDados(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 104\u00BA - Nome: hi!| Pontuacao: 100 - 1089");

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    boolean var37 = var30.CheckRanking("1\u00BA - hi! - 02\u00BA - hi! - -1", (java.lang.Integer)2);
    java.util.List var38 = var30.getRank();
    java.lang.String var39 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "1\u00BA -  - -12\u00BA - 1\u00BA - hi! - 02\u00BA - hi! - -1 - 2"+ "'", var39.equals("1\u00BA -  - -12\u00BA - 1\u00BA - hi! - 02\u00BA - hi! - -1 - 2"));

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    classes.Gamer var2 = new classes.Gamer("Nome: | Pontuacao: 1", (-100));

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    classes.Persistencia var37 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    var37.persistirDados(var45);
    java.lang.String var47 = var45.toString();
    classes.Ranking var48 = var1.lerDados(var45);
    classes.Persistencia var50 = new classes.Persistencia("hi!");
    classes.Ranking var51 = new classes.Ranking();
    boolean var54 = var51.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var57 = var51.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var58 = var50.lerDados(var51);
    classes.Ranking var59 = new classes.Ranking();
    java.lang.String var60 = var59.toString();
    java.util.List var61 = var59.getRank();
    var50.persistirDados(var59);
    classes.Ranking var63 = new classes.Ranking();
    boolean var66 = var63.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var69 = var63.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var70 = var63.getRank();
    var50.persistirDados(var63);
    classes.Persistencia var73 = new classes.Persistencia("");
    classes.Ranking var74 = new classes.Ranking();
    java.util.List var75 = var74.getRank();
    var73.persistirDados(var74);
    classes.Ranking var77 = new classes.Ranking();
    java.util.List var78 = var77.getRank();
    classes.Ranking var79 = var73.lerDados(var77);
    boolean var82 = var79.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var83 = var50.lerDados(var79);
    classes.Persistencia var85 = new classes.Persistencia("hi!");
    classes.Ranking var86 = new classes.Ranking();
    boolean var89 = var86.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var92 = var86.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var93 = var85.lerDados(var86);
    classes.Ranking var94 = var50.lerDados(var93);
    java.util.List var95 = var94.getRank();
    java.util.List var96 = var94.getRank();
    classes.Ranking var97 = var1.lerDados(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Persistencia var25 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    classes.Ranking var33 = var27.lerDados(var31);
    var25.persistirDados(var33);
    java.lang.String var35 = var33.toString();
    classes.Ranking var36 = var11.lerDados(var33);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Persistencia var40 = new classes.Persistencia("hi!");
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var48 = var40.lerDados(var41);
    var38.persistirDados(var41);
    classes.Ranking var50 = var11.lerDados(var41);
    classes.Ranking var51 = var1.lerDados(var41);
    classes.Persistencia var53 = new classes.Persistencia("hi!");
    classes.Ranking var54 = new classes.Ranking();
    boolean var57 = var54.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var60 = var54.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var61 = var53.lerDados(var54);
    classes.Ranking var62 = new classes.Ranking();
    java.lang.String var63 = var62.toString();
    java.util.List var64 = var62.getRank();
    var53.persistirDados(var62);
    classes.Ranking var66 = new classes.Ranking();
    boolean var69 = var66.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var72 = var66.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var73 = var66.getRank();
    var53.persistirDados(var66);
    classes.Ranking var75 = var1.lerDados(var66);
    classes.Ranking var76 = new classes.Ranking();
    java.util.List var77 = var76.getRank();
    java.lang.String var78 = var76.toString();
    java.util.List var79 = var76.getRank();
    java.lang.String var80 = var76.toString();
    boolean var83 = var76.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)2);
    classes.Ranking var84 = var1.lerDados(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    int var9 = var8.getScore();
    int var10 = var8.getScore();
    int var11 = var2.compareTo(var8);
    int var12 = var8.getScore();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    java.lang.String var16 = var15.getName();
    int var17 = var15.getScore();
    classes.Gamer var20 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var21 = var15.compareTo(var20);
    java.lang.String var22 = var20.toString();
    int var23 = var8.compareTo(var20);
    java.lang.String var24 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var22.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var24.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    classes.Gamer var2 = new classes.Gamer("Nome: | Pontuacao: -1", 110);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var8 = var4.getRank();
    java.util.List var9 = var4.getRank();
    var3.persistirDados(var4);
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    var12.persistirDados(var16);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    java.lang.String var20 = var18.toString();
    var12.persistirDados(var18);
    classes.Ranking var22 = var3.lerDados(var18);
    var1.persistirDados(var18);
    classes.Persistencia var25 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var27 = new classes.Persistencia("hi!");
    classes.Ranking var28 = new classes.Ranking();
    boolean var31 = var28.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var34 = var28.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var35 = var27.lerDados(var28);
    java.util.List var36 = var35.getRank();
    classes.Ranking var37 = var25.lerDados(var35);
    classes.Ranking var38 = var1.lerDados(var35);
    classes.Persistencia var40 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    classes.Ranking var43 = var40.lerDados(var41);
    classes.Persistencia var45 = new classes.Persistencia("hi!");
    classes.Ranking var46 = new classes.Ranking();
    boolean var49 = var46.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var52 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var53 = var45.lerDados(var46);
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    java.lang.String var56 = var54.toString();
    var45.persistirDados(var54);
    classes.Ranking var58 = new classes.Ranking();
    java.util.List var59 = var58.getRank();
    classes.Ranking var60 = var45.lerDados(var58);
    var40.persistirDados(var58);
    classes.Persistencia var63 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var65 = new classes.Persistencia("");
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    var65.persistirDados(var66);
    classes.Ranking var69 = new classes.Ranking();
    java.util.List var70 = var69.getRank();
    classes.Ranking var71 = var65.lerDados(var69);
    classes.Ranking var72 = new classes.Ranking();
    java.util.List var73 = var72.getRank();
    java.lang.String var74 = var72.toString();
    java.lang.String var75 = var72.toString();
    var65.persistirDados(var72);
    classes.Ranking var77 = var63.lerDados(var72);
    classes.Ranking var78 = new classes.Ranking();
    java.lang.String var79 = var78.toString();
    java.util.List var80 = var78.getRank();
    classes.Ranking var81 = var63.lerDados(var78);
    classes.Ranking var82 = var40.lerDados(var78);
    boolean var85 = var82.CheckRanking("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100", (java.lang.Integer)88);
    java.util.List var86 = var82.getRank();
    java.util.List var87 = var82.getRank();
    var1.persistirDados(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    java.lang.String var69 = var66.toString();
    var59.persistirDados(var66);
    classes.Ranking var71 = var57.lerDados(var66);
    boolean var74 = var66.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var77 = var66.CheckRanking("", (java.lang.Integer)10);
    java.util.List var78 = var66.getRank();
    var1.persistirDados(var66);
    classes.Ranking var80 = new classes.Ranking();
    boolean var83 = var80.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var86 = var80.CheckRanking("hi!", (java.lang.Integer)10);
    classes.Ranking var87 = var1.lerDados(var80);
    boolean var90 = var87.CheckRanking("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99", (java.lang.Integer)(-99));
    java.lang.String var91 = var87.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "1\u00BA - Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99 - -99"+ "'", var91.equals("1\u00BA - Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99 - -99"));

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.getName();
    int var10 = var8.getScore();
    int var11 = var2.compareTo(var8);
    classes.Gamer var14 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 100);
    int var15 = var8.compareTo(var14);
    java.lang.String var16 = var14.getName();
    java.lang.String var17 = var14.getName();
    int var18 = var14.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var16.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var17.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    classes.Persistencia var28 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var30 = new classes.Persistencia("");
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    var30.persistirDados(var31);
    classes.Ranking var34 = new classes.Ranking();
    var30.persistirDados(var34);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    java.lang.String var52 = var46.toString();
    var30.persistirDados(var46);
    classes.Ranking var54 = var28.lerDados(var46);
    var1.persistirDados(var54);
    classes.Persistencia var57 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    java.lang.String var69 = var66.toString();
    var59.persistirDados(var66);
    classes.Ranking var71 = var57.lerDados(var66);
    boolean var74 = var66.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var77 = var66.CheckRanking("", (java.lang.Integer)10);
    java.util.List var78 = var66.getRank();
    var1.persistirDados(var66);
    classes.Ranking var80 = new classes.Ranking();
    boolean var83 = var80.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var86 = var80.CheckRanking("hi!", (java.lang.Integer)10);
    classes.Ranking var87 = var1.lerDados(var80);
    classes.Ranking var88 = new classes.Ranking();
    boolean var91 = var88.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var94 = var88.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var1.persistirDados(var88);
    java.util.List var96 = var88.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    boolean var25 = var14.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", (java.lang.Integer)100);
    boolean var28 = var14.CheckRanking("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99", (java.lang.Integer)(-99));
    boolean var31 = var14.CheckRanking("1\u00BA -  - 1", (java.lang.Integer)199);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var7.getScore();
    int var9 = var7.getScore();
    java.lang.String var10 = var7.getName();
    java.lang.String var11 = var7.getName();
    int var12 = var7.getScore();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    java.lang.String var16 = var15.getName();
    java.lang.String var17 = var15.toString();
    int var18 = var15.getScore();
    java.lang.String var19 = var15.getName();
    java.lang.String var20 = var15.getName();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    java.lang.String var24 = var23.toString();
    int var25 = var23.getScore();
    java.lang.String var26 = var23.getName();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    classes.Gamer var34 = new classes.Gamer("hi!", 100);
    int var35 = var29.compareTo(var34);
    int var36 = var23.compareTo(var29);
    int var37 = var15.compareTo(var23);
    int var38 = var7.compareTo(var15);
    int var39 = var2.compareTo(var15);
    int var40 = var15.getScore();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    java.lang.String var44 = var43.toString();
    int var45 = var15.compareTo(var43);
    java.lang.String var46 = var15.toString();
    java.lang.String var47 = var15.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var24.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var46.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var5.compareTo(var10);
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    int var14 = var2.compareTo(var10);
    classes.Gamer var17 = new classes.Gamer("1\u00BA -  - 2", 2);
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.getName();
    java.lang.String var22 = var20.toString();
    int var23 = var20.getScore();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.getName();
    int var28 = var26.getScore();
    int var29 = var20.compareTo(var26);
    int var30 = var20.getScore();
    int var31 = var17.compareTo(var20);
    int var32 = var10.compareTo(var20);
    int var33 = var20.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var22.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    java.util.List var6 = var5.getRank();
    classes.Ranking var7 = var1.lerDados(var5);
    classes.Persistencia var9 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    var11.persistirDados(var15);
    classes.Persistencia var18 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    var20.persistirDados(var27);
    classes.Ranking var32 = var18.lerDados(var27);
    java.lang.String var33 = var27.toString();
    var11.persistirDados(var27);
    classes.Ranking var35 = var9.lerDados(var27);
    var1.persistirDados(var27);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Ranking var39 = new classes.Ranking();
    boolean var42 = var39.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var45 = var39.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var46 = var38.lerDados(var39);
    classes.Ranking var47 = new classes.Ranking();
    java.util.List var48 = var47.getRank();
    java.lang.String var49 = var47.toString();
    var38.persistirDados(var47);
    classes.Ranking var51 = var1.lerDados(var47);
    classes.Persistencia var53 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var55 = new classes.Persistencia("");
    classes.Ranking var56 = new classes.Ranking();
    java.util.List var57 = var56.getRank();
    var55.persistirDados(var56);
    classes.Ranking var59 = new classes.Ranking();
    java.util.List var60 = var59.getRank();
    classes.Ranking var61 = var55.lerDados(var59);
    classes.Ranking var62 = new classes.Ranking();
    java.util.List var63 = var62.getRank();
    java.lang.String var64 = var62.toString();
    java.lang.String var65 = var62.toString();
    var55.persistirDados(var62);
    classes.Ranking var67 = var53.lerDados(var62);
    java.lang.String var68 = var62.toString();
    java.lang.String var69 = var62.toString();
    boolean var72 = var62.CheckRanking("1\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)2);
    classes.Ranking var73 = var1.lerDados(var62);
    java.util.List var74 = var62.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    classes.Operator var3 = new classes.Operator(97, (-989), (-99));

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 2);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 2"+ "'", var3.equals("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 2"));

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    int var11 = var5.compareTo(var10);
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    int var14 = var2.compareTo(var10);
    classes.Gamer var17 = new classes.Gamer("1\u00BA -  - -1", 10);
    int var18 = var2.compareTo(var17);
    int var19 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 100);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    classes.Operator var3 = new classes.Operator(2, 89, 0);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var1.lerDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    java.lang.String var18 = var17.toString();
    java.util.List var19 = var17.getRank();
    boolean var22 = var17.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    classes.Ranking var23 = var1.lerDados(var17);
    java.util.List var24 = var17.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    classes.Ranking var0 = new classes.Ranking();
    java.util.List var1 = var0.getRank();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    boolean var6 = var0.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)2);
    boolean var9 = var0.CheckRanking("Nome: 1\u00BA -  - -1| Pontuacao: 100", (java.lang.Integer)10);
    java.lang.String var10 = var0.toString();
    java.util.List var11 = var0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "1\u00BA - Nome: hi!| Pontuacao: 100 - 22\u00BA - Nome: 1\u00BA -  - -1| Pontuacao: 100 - 10"+ "'", var10.equals("1\u00BA - Nome: hi!| Pontuacao: 100 - 22\u00BA - Nome: 1\u00BA -  - -1| Pontuacao: 100 - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    var15.persistirDados(var23);
    java.lang.String var25 = var23.toString();
    classes.Ranking var26 = var1.lerDados(var23);
    boolean var29 = var23.CheckRanking("Nome: 1\u00BA -  - 2| Pontuacao: 1", (java.lang.Integer)100);
    boolean var32 = var23.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-989));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    classes.Operator var3 = new classes.Operator((-99), 2, 1089);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    classes.Gamer var2 = new classes.Gamer("hi!", 10);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var5.toString();
    int var8 = var2.compareTo(var5);
    java.lang.String var9 = var5.getName();
    int var10 = var5.getScore();
    java.lang.String var11 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -13\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 104\u00BA - Nome: hi!| Pontuacao: 100 - 1089", 88);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    boolean var33 = var30.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var34 = var1.lerDados(var30);
    java.lang.String var35 = var30.toString();
    boolean var38 = var30.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)110);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "1\u00BA -  - -1"+ "'", var35.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    classes.Operator var3 = new classes.Operator(1, (-989), 11);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var2.toString();
    int var10 = var2.getScore();
    java.lang.String var11 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 0);
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - -1", 8910);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    classes.Gamer var2 = new classes.Gamer("hi!", 10);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = var5.toString();
    int var8 = var2.compareTo(var5);
    java.lang.String var9 = var5.getName();
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var12.getScore();
    java.lang.String var16 = var12.getName();
    java.lang.String var17 = var12.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    java.lang.String var23 = var20.getName();
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.toString();
    int var28 = var26.getScore();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    int var32 = var26.compareTo(var31);
    int var33 = var20.compareTo(var26);
    int var34 = var12.compareTo(var20);
    int var35 = var12.getScore();
    int var36 = var5.compareTo(var12);
    int var37 = var5.getScore();
    classes.Gamer var40 = new classes.Gamer("Nome: | Pontuacao: 2", 1089);
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    java.lang.String var44 = var43.toString();
    int var45 = var43.getScore();
    java.lang.String var46 = var43.getName();
    classes.Gamer var49 = new classes.Gamer("hi!", 100);
    java.lang.String var50 = var49.toString();
    int var51 = var49.getScore();
    classes.Gamer var54 = new classes.Gamer("hi!", 100);
    int var55 = var49.compareTo(var54);
    int var56 = var43.compareTo(var49);
    classes.Gamer var59 = new classes.Gamer("hi!", 100);
    java.lang.String var60 = var59.toString();
    java.lang.String var61 = var59.toString();
    int var62 = var59.getScore();
    int var63 = var49.compareTo(var59);
    int var64 = var40.compareTo(var49);
    int var65 = var5.compareTo(var40);
    java.lang.String var66 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var27.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var50.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var60.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var61.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-989));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 989);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    int var15 = var13.getScore();
    java.lang.String var16 = var13.getName();
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.toString();
    int var21 = var19.getScore();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    int var25 = var19.compareTo(var24);
    int var26 = var13.compareTo(var19);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    int var32 = var19.compareTo(var29);
    java.lang.String var33 = var19.toString();
    int var34 = var9.compareTo(var19);
    java.lang.String var35 = var9.toString();
    classes.Gamer var38 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", 98);
    int var39 = var9.compareTo(var38);
    java.lang.String var40 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var20.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Nome: | Pontuacao: 10"+ "'", var35.equals("Nome: | Pontuacao: 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Nome: | Pontuacao: 10"+ "'", var40.equals("Nome: | Pontuacao: 10"));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    classes.Operator var3 = new classes.Operator(89, 199, 8910);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.getName();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.getName();
    java.lang.String var10 = var8.getName();
    int var11 = var2.compareTo(var8);
    java.lang.String var12 = var8.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    classes.Persistencia var1 = new classes.Persistencia("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 2");

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    java.util.List var12 = var11.getRank();
    classes.Ranking var13 = var1.lerDados(var11);
    classes.Persistencia var15 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var17 = new classes.Persistencia("");
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    var17.persistirDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var17.lerDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    java.lang.String var26 = var24.toString();
    java.lang.String var27 = var24.toString();
    var17.persistirDados(var24);
    classes.Ranking var29 = var15.lerDados(var24);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    boolean var35 = var32.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var36 = var32.getRank();
    java.util.List var37 = var32.getRank();
    var31.persistirDados(var32);
    var15.persistirDados(var32);
    var1.persistirDados(var32);
    classes.Persistencia var42 = new classes.Persistencia("hi!");
    classes.Ranking var43 = new classes.Ranking();
    boolean var46 = var43.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var49 = var43.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var50 = var42.lerDados(var43);
    classes.Ranking var51 = new classes.Ranking();
    java.lang.String var52 = var51.toString();
    java.util.List var53 = var51.getRank();
    var42.persistirDados(var51);
    classes.Ranking var55 = new classes.Ranking();
    boolean var58 = var55.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var61 = var55.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var62 = var55.getRank();
    var42.persistirDados(var55);
    classes.Persistencia var65 = new classes.Persistencia("");
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    var65.persistirDados(var66);
    classes.Ranking var69 = new classes.Ranking();
    java.util.List var70 = var69.getRank();
    classes.Ranking var71 = var65.lerDados(var69);
    boolean var74 = var71.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var75 = var42.lerDados(var71);
    var1.persistirDados(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    classes.Gamer var2 = new classes.Gamer("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 2| Pontuacao: 99", 110);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var1.lerDados(var30);
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    var34.persistirDados(var38);
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    java.lang.String var42 = var40.toString();
    var34.persistirDados(var40);
    classes.Persistencia var45 = new classes.Persistencia("hi!");
    classes.Persistencia var47 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var49 = new classes.Persistencia("");
    classes.Ranking var50 = new classes.Ranking();
    java.util.List var51 = var50.getRank();
    var49.persistirDados(var50);
    classes.Ranking var53 = new classes.Ranking();
    java.util.List var54 = var53.getRank();
    classes.Ranking var55 = var49.lerDados(var53);
    classes.Ranking var56 = new classes.Ranking();
    java.util.List var57 = var56.getRank();
    java.lang.String var58 = var56.toString();
    java.lang.String var59 = var56.toString();
    var49.persistirDados(var56);
    classes.Ranking var61 = var47.lerDados(var56);
    java.lang.String var62 = var61.toString();
    classes.Ranking var63 = var45.lerDados(var61);
    var34.persistirDados(var63);
    classes.Ranking var65 = var1.lerDados(var63);
    java.lang.String var66 = var63.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    classes.Persistencia var1 = new classes.Persistencia("Nome: | Pontuacao: -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    var5.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    java.lang.String var27 = var21.toString();
    var5.persistirDados(var21);
    classes.Ranking var29 = var3.lerDados(var21);
    classes.Persistencia var31 = new classes.Persistencia("");
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    var31.persistirDados(var32);
    java.lang.String var35 = var32.toString();
    java.util.List var36 = var32.getRank();
    classes.Ranking var37 = var3.lerDados(var32);
    var1.persistirDados(var32);
    classes.Persistencia var40 = new classes.Persistencia("");
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    var40.persistirDados(var41);
    classes.Ranking var44 = new classes.Ranking();
    java.util.List var45 = var44.getRank();
    classes.Ranking var46 = var40.lerDados(var44);
    classes.Ranking var47 = var1.lerDados(var46);
    java.util.List var48 = var46.getRank();
    java.lang.String var49 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    classes.Operator var3 = new classes.Operator((-2), (-90), 88);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: hi!| Pontuacao: 100 - 22\u00BA - Nome: 1\u00BA -  - -1| Pontuacao: 100 - 10", (-10));

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    classes.Ranking var15 = var1.lerDados(var10);
    java.lang.String var16 = var15.toString();
    java.util.List var17 = var15.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    classes.Operator var3 = new classes.Operator(98, (-100), 1);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var6 = var0.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    java.util.List var7 = var0.getRank();
    boolean var10 = var0.CheckRanking("Nome: 1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98| Pontuacao: -99", (java.lang.Integer)(-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    classes.Operator var3 = new classes.Operator(100, 2, 1);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    int var7 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 98);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    classes.Ranking var36 = new classes.Ranking();
    java.lang.String var37 = var36.toString();
    java.util.List var38 = var36.getRank();
    classes.Ranking var39 = var21.lerDados(var36);
    classes.Ranking var40 = var1.lerDados(var36);
    classes.Persistencia var42 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var44 = new classes.Persistencia("");
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    var44.persistirDados(var45);
    classes.Ranking var48 = new classes.Ranking();
    var44.persistirDados(var48);
    classes.Persistencia var51 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var53 = new classes.Persistencia("");
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    var53.persistirDados(var54);
    classes.Ranking var57 = new classes.Ranking();
    java.util.List var58 = var57.getRank();
    classes.Ranking var59 = var53.lerDados(var57);
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    java.lang.String var62 = var60.toString();
    java.lang.String var63 = var60.toString();
    var53.persistirDados(var60);
    classes.Ranking var65 = var51.lerDados(var60);
    java.lang.String var66 = var60.toString();
    var44.persistirDados(var60);
    classes.Ranking var68 = var42.lerDados(var60);
    var1.persistirDados(var68);
    classes.Persistencia var71 = new classes.Persistencia("Nome: 1\u00BA -  - 2| Pontuacao: 2");
    classes.Ranking var72 = new classes.Ranking();
    boolean var75 = var72.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var76 = var72.getRank();
    java.lang.String var77 = var72.toString();
    classes.Ranking var78 = var71.lerDados(var72);
    boolean var81 = var72.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-10));
    var1.persistirDados(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var77.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    classes.Operator var3 = new classes.Operator(88, 199, 10);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    classes.Gamer var2 = new classes.Gamer("Nome: hi!| Pontuacao: 100", (-1));
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.getName();
    classes.Gamer var13 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    java.lang.String var19 = var16.getName();
    int var20 = var13.compareTo(var16);
    java.lang.String var21 = var13.getName();
    int var22 = var7.compareTo(var13);
    int var23 = var13.getScore();
    classes.Gamer var26 = new classes.Gamer("hi!", 10);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    int var32 = var26.compareTo(var29);
    int var33 = var29.getScore();
    int var34 = var13.compareTo(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA -  - -1"+ "'", var21.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    int var24 = var18.compareTo(var23);
    java.lang.String var25 = var23.toString();
    int var26 = var2.compareTo(var23);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    int var32 = var29.getScore();
    java.lang.String var33 = var29.getName();
    java.lang.String var34 = var29.getName();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.toString();
    int var39 = var37.getScore();
    java.lang.String var40 = var37.getName();
    classes.Gamer var43 = new classes.Gamer("hi!", 100);
    java.lang.String var44 = var43.toString();
    int var45 = var43.getScore();
    classes.Gamer var48 = new classes.Gamer("hi!", 100);
    int var49 = var43.compareTo(var48);
    int var50 = var37.compareTo(var43);
    int var51 = var29.compareTo(var37);
    classes.Gamer var54 = new classes.Gamer("1\u00BA -  - 2", 1);
    int var55 = var29.compareTo(var54);
    int var56 = var2.compareTo(var29);
    int var57 = var2.getScore();
    classes.Gamer var60 = new classes.Gamer("Nome: | Pontuacao: -1", (-1));
    int var61 = var2.compareTo(var60);
    java.lang.String var62 = var2.getName();
    java.lang.String var63 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var44.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var63.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var6 = var0.CheckRanking("hi!", (java.lang.Integer)10);
    java.lang.String var7 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10"+ "'", var7.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10"));

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    classes.Operator var3 = new classes.Operator(1, 1089, (-108));

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.getName();
    int var10 = var8.getScore();
    int var11 = var2.compareTo(var8);
    classes.Gamer var14 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", 100);
    int var15 = var8.compareTo(var14);
    java.lang.String var16 = var14.getName();
    java.lang.String var17 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var16.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100"+ "'", var17.equals("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100"));

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    classes.Operator var3 = new classes.Operator(110, 1, (-989));

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -1", 98);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA - 1\u00BA -  - -1 - -1| Pontuacao: 98"+ "'", var3.equals("Nome: 1\u00BA - 1\u00BA -  - -1 - -1| Pontuacao: 98"));

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", 0);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1| Pontuacao: 0"+ "'", var3.equals("Nome: 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1| Pontuacao: 0"));

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10 - 98");

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    var3.persistirDados(var12);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var3.lerDados(var16);
    var1.persistirDados(var18);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var25 = new classes.Persistencia("");
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    var25.persistirDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var25.lerDados(var29);
    classes.Ranking var32 = new classes.Ranking();
    java.util.List var33 = var32.getRank();
    java.lang.String var34 = var32.toString();
    java.lang.String var35 = var32.toString();
    var25.persistirDados(var32);
    classes.Ranking var37 = var23.lerDados(var32);
    java.lang.String var38 = var37.toString();
    classes.Ranking var39 = var21.lerDados(var37);
    classes.Ranking var40 = var1.lerDados(var39);
    java.lang.String var41 = var40.toString();
    boolean var44 = var40.CheckRanking("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 98", (java.lang.Integer)989);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var39 = new classes.Persistencia("hi!");
    classes.Ranking var40 = new classes.Ranking();
    boolean var43 = var40.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var46 = var40.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var47 = var39.lerDados(var40);
    java.util.List var48 = var47.getRank();
    classes.Ranking var49 = var37.lerDados(var47);
    var1.persistirDados(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var26 = new classes.Persistencia("");
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    var26.persistirDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var26.lerDados(var30);
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    java.lang.String var35 = var33.toString();
    java.lang.String var36 = var33.toString();
    var26.persistirDados(var33);
    classes.Ranking var38 = var24.lerDados(var33);
    boolean var41 = var33.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var44 = var33.CheckRanking("", (java.lang.Integer)10);
    classes.Ranking var45 = var1.lerDados(var33);
    classes.Ranking var46 = new classes.Ranking();
    boolean var49 = var46.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var52 = var46.CheckRanking("hi!", (java.lang.Integer)(-1));
    var1.persistirDados(var46);
    classes.Persistencia var55 = new classes.Persistencia("hi!");
    classes.Ranking var56 = new classes.Ranking();
    boolean var59 = var56.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var62 = var56.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var63 = var55.lerDados(var56);
    classes.Ranking var64 = new classes.Ranking();
    java.lang.String var65 = var64.toString();
    java.util.List var66 = var64.getRank();
    var55.persistirDados(var64);
    classes.Ranking var68 = new classes.Ranking();
    boolean var71 = var68.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var74 = var68.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var75 = var68.getRank();
    var55.persistirDados(var68);
    classes.Persistencia var78 = new classes.Persistencia("");
    classes.Ranking var79 = new classes.Ranking();
    java.util.List var80 = var79.getRank();
    var78.persistirDados(var79);
    classes.Ranking var82 = new classes.Ranking();
    java.util.List var83 = var82.getRank();
    classes.Ranking var84 = var78.lerDados(var82);
    boolean var87 = var84.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var88 = var55.lerDados(var84);
    java.lang.String var89 = var84.toString();
    java.lang.String var90 = var84.toString();
    var1.persistirDados(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "1\u00BA -  - -1"+ "'", var89.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "1\u00BA -  - -1"+ "'", var90.equals("1\u00BA -  - -1"));

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    int var11 = var7.getScore();
    java.lang.String var12 = var7.toString();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    java.lang.String var16 = var15.getName();
    java.lang.String var17 = var15.toString();
    int var18 = var15.getScore();
    java.lang.String var19 = var15.getName();
    java.lang.String var20 = var15.getName();
    java.lang.String var21 = var15.toString();
    java.lang.String var22 = var15.getName();
    int var23 = var7.compareTo(var15);
    java.lang.String var24 = var15.getName();
    java.lang.String var25 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    classes.Operator var3 = new classes.Operator(11, (-989), 97);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    java.lang.String var25 = var2.getName();
    int var26 = var2.getScore();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    java.lang.String var32 = var29.getName();
    classes.Gamer var35 = new classes.Gamer("hi!", 100);
    java.lang.String var36 = var35.toString();
    int var37 = var35.getScore();
    classes.Gamer var40 = new classes.Gamer("hi!", 100);
    int var41 = var35.compareTo(var40);
    int var42 = var29.compareTo(var35);
    classes.Gamer var45 = new classes.Gamer("hi!", 100);
    java.lang.String var46 = var45.toString();
    int var47 = var45.getScore();
    int var48 = var35.compareTo(var45);
    int var49 = var2.compareTo(var35);
    java.lang.String var50 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var36.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var46.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var50.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    classes.Ranking var4 = var1.lerDados(var2);
    classes.Persistencia var6 = new classes.Persistencia("hi!");
    classes.Ranking var7 = new classes.Ranking();
    boolean var10 = var7.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var13 = var7.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var14 = var6.lerDados(var7);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    java.lang.String var17 = var15.toString();
    var6.persistirDados(var15);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var6.lerDados(var19);
    var1.persistirDados(var19);
    classes.Persistencia var24 = new classes.Persistencia("hi!");
    classes.Ranking var25 = new classes.Ranking();
    boolean var28 = var25.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var31 = var25.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var32 = var24.lerDados(var25);
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    java.lang.String var35 = var33.toString();
    var24.persistirDados(var33);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    classes.Ranking var39 = var24.lerDados(var37);
    classes.Persistencia var41 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var43 = new classes.Persistencia("");
    classes.Ranking var44 = new classes.Ranking();
    java.util.List var45 = var44.getRank();
    var43.persistirDados(var44);
    classes.Ranking var47 = new classes.Ranking();
    java.util.List var48 = var47.getRank();
    classes.Ranking var49 = var43.lerDados(var47);
    classes.Ranking var50 = new classes.Ranking();
    java.util.List var51 = var50.getRank();
    java.lang.String var52 = var50.toString();
    java.lang.String var53 = var50.toString();
    var43.persistirDados(var50);
    classes.Ranking var55 = var41.lerDados(var50);
    classes.Ranking var56 = new classes.Ranking();
    java.lang.String var57 = var56.toString();
    java.util.List var58 = var56.getRank();
    classes.Ranking var59 = var41.lerDados(var56);
    var24.persistirDados(var59);
    classes.Ranking var61 = new classes.Ranking();
    boolean var64 = var61.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var67 = var61.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var68 = var61.getRank();
    java.util.List var69 = var61.getRank();
    classes.Ranking var70 = var24.lerDados(var61);
    var1.persistirDados(var61);
    java.util.List var72 = var61.getRank();
    java.util.List var73 = var61.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    java.lang.String var17 = var2.toString();
    int var18 = var2.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    java.lang.String var22 = var21.getName();
    java.lang.String var23 = var21.toString();
    int var24 = var21.getScore();
    java.lang.String var25 = var21.getName();
    classes.Gamer var28 = new classes.Gamer("", 10);
    int var29 = var21.compareTo(var28);
    java.lang.String var30 = var21.toString();
    classes.Gamer var33 = new classes.Gamer("hi!", 100);
    java.lang.String var34 = var33.toString();
    int var35 = var33.getScore();
    java.lang.String var36 = var33.getName();
    classes.Gamer var39 = new classes.Gamer("hi!", 100);
    java.lang.String var40 = var39.toString();
    int var41 = var39.getScore();
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    int var45 = var39.compareTo(var44);
    int var46 = var33.compareTo(var39);
    int var47 = var33.getScore();
    classes.Gamer var50 = new classes.Gamer("hi!", 100);
    java.lang.String var51 = var50.getName();
    int var52 = var50.getScore();
    classes.Gamer var55 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var56 = var50.compareTo(var55);
    int var57 = var33.compareTo(var50);
    int var58 = var21.compareTo(var33);
    int var59 = var2.compareTo(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var23.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var34.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var40.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - Nome: hi!| Pontuacao: 100 - 100");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    java.lang.String var4 = var2.toString();
    java.util.List var5 = var2.getRank();
    java.util.List var6 = var2.getRank();
    var1.persistirDados(var2);
    classes.Persistencia var9 = new classes.Persistencia("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2");
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var13 = new classes.Persistencia("");
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    var13.persistirDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    var13.persistirDados(var17);
    classes.Persistencia var20 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var22 = new classes.Persistencia("");
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    var22.persistirDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    classes.Ranking var28 = var22.lerDados(var26);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    java.lang.String var31 = var29.toString();
    java.lang.String var32 = var29.toString();
    var22.persistirDados(var29);
    classes.Ranking var34 = var20.lerDados(var29);
    java.lang.String var35 = var29.toString();
    var13.persistirDados(var29);
    classes.Ranking var37 = var11.lerDados(var29);
    classes.Persistencia var39 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var41 = new classes.Persistencia("");
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    var41.persistirDados(var42);
    classes.Ranking var45 = new classes.Ranking();
    java.util.List var46 = var45.getRank();
    classes.Ranking var47 = var41.lerDados(var45);
    classes.Ranking var48 = new classes.Ranking();
    java.util.List var49 = var48.getRank();
    java.lang.String var50 = var48.toString();
    java.lang.String var51 = var48.toString();
    var41.persistirDados(var48);
    classes.Ranking var53 = var39.lerDados(var48);
    java.util.List var54 = var48.getRank();
    java.util.List var55 = var48.getRank();
    classes.Ranking var56 = var11.lerDados(var48);
    java.util.List var57 = var56.getRank();
    classes.Ranking var58 = var9.lerDados(var56);
    var1.persistirDados(var56);
    classes.Persistencia var61 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var63 = new classes.Persistencia("");
    classes.Ranking var64 = new classes.Ranking();
    java.util.List var65 = var64.getRank();
    var63.persistirDados(var64);
    classes.Ranking var67 = new classes.Ranking();
    java.util.List var68 = var67.getRank();
    classes.Ranking var69 = var63.lerDados(var67);
    classes.Ranking var70 = new classes.Ranking();
    java.util.List var71 = var70.getRank();
    java.lang.String var72 = var70.toString();
    java.lang.String var73 = var70.toString();
    var63.persistirDados(var70);
    classes.Ranking var75 = var61.lerDados(var70);
    boolean var78 = var70.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var81 = var70.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)2);
    var1.persistirDados(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    int var10 = var2.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.getName();
    int var20 = var18.getScore();
    int var21 = var18.getScore();
    int var22 = var13.compareTo(var18);
    int var23 = var2.compareTo(var13);
    classes.Gamer var26 = new classes.Gamer("hi!", 100);
    java.lang.String var27 = var26.getName();
    java.lang.String var28 = var26.toString();
    int var29 = var26.getScore();
    java.lang.String var30 = var26.getName();
    classes.Gamer var33 = new classes.Gamer("", 10);
    int var34 = var26.compareTo(var33);
    java.lang.String var35 = var26.toString();
    classes.Gamer var38 = new classes.Gamer("hi!", 100);
    java.lang.String var39 = var38.toString();
    int var40 = var38.getScore();
    java.lang.String var41 = var38.getName();
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.toString();
    int var46 = var44.getScore();
    classes.Gamer var49 = new classes.Gamer("hi!", 100);
    int var50 = var44.compareTo(var49);
    int var51 = var38.compareTo(var44);
    int var52 = var38.getScore();
    classes.Gamer var55 = new classes.Gamer("hi!", 100);
    java.lang.String var56 = var55.getName();
    int var57 = var55.getScore();
    classes.Gamer var60 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var61 = var55.compareTo(var60);
    int var62 = var38.compareTo(var55);
    int var63 = var26.compareTo(var38);
    int var64 = var13.compareTo(var26);
    java.lang.String var65 = var13.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var28.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var35.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var45.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    int var9 = var2.compareTo(var5);
    int var10 = var2.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.getName();
    int var20 = var18.getScore();
    int var21 = var18.getScore();
    int var22 = var13.compareTo(var18);
    int var23 = var2.compareTo(var13);
    classes.Gamer var26 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 103\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 0", 0);
    int var27 = var2.compareTo(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-100));

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", 99);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: 1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100| Pontuacao: 99"+ "'", var3.equals("Nome: 1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100| Pontuacao: 99"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100"+ "'", var4.equals("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100"));

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    classes.Persistencia var1 = new classes.Persistencia("Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    java.lang.String var13 = var10.toString();
    var3.persistirDados(var10);
    java.util.List var15 = var10.getRank();
    classes.Ranking var16 = var1.lerDados(var10);
    java.lang.String var17 = var16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - Nome: 1\u00BA - hi! - 02\u00BA - hi! - -1| Pontuacao: 99 - -99");

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("hi!");
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var14 = new classes.Persistencia("");
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    var14.persistirDados(var15);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    classes.Ranking var20 = var14.lerDados(var18);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    java.lang.String var23 = var21.toString();
    java.lang.String var24 = var21.toString();
    var14.persistirDados(var21);
    classes.Ranking var26 = var12.lerDados(var21);
    boolean var29 = var21.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var10.persistirDados(var21);
    java.lang.String var31 = var21.toString();
    classes.Ranking var32 = var3.lerDados(var21);
    classes.Ranking var33 = var1.lerDados(var32);
    classes.Persistencia var35 = new classes.Persistencia("hi!");
    classes.Persistencia var37 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var39 = new classes.Persistencia("");
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    var39.persistirDados(var40);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    classes.Ranking var45 = var39.lerDados(var43);
    classes.Ranking var46 = new classes.Ranking();
    java.util.List var47 = var46.getRank();
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    var39.persistirDados(var46);
    classes.Ranking var51 = var37.lerDados(var46);
    boolean var54 = var46.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var35.persistirDados(var46);
    classes.Persistencia var57 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var59 = new classes.Persistencia("");
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    var59.persistirDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    classes.Ranking var65 = var59.lerDados(var63);
    classes.Ranking var66 = new classes.Ranking();
    java.util.List var67 = var66.getRank();
    java.lang.String var68 = var66.toString();
    java.lang.String var69 = var66.toString();
    var59.persistirDados(var66);
    classes.Ranking var71 = var57.lerDados(var66);
    boolean var74 = var66.CheckRanking("", (java.lang.Integer)1);
    classes.Ranking var75 = var35.lerDados(var66);
    classes.Ranking var76 = var1.lerDados(var66);
    java.lang.String var77 = var66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "1\u00BA - 1\u00BA -  - -1 - -1"+ "'", var31.equals("1\u00BA - 1\u00BA -  - -1 - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "1\u00BA -  - 1"+ "'", var77.equals("1\u00BA -  - 1"));

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    classes.Operator var3 = new classes.Operator((-90), 10, 100);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    int var7 = var3.getResult();
    int var8 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    java.util.List var16 = var15.getRank();
    classes.Ranking var17 = var11.lerDados(var15);
    boolean var20 = var17.CheckRanking("", (java.lang.Integer)(-1));
    java.lang.String var21 = var17.toString();
    classes.Ranking var22 = var1.lerDados(var17);
    java.lang.String var23 = var17.toString();
    java.util.List var24 = var17.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA -  - -1"+ "'", var21.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "1\u00BA -  - -1"+ "'", var23.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    classes.Gamer var2 = new classes.Gamer("", (-1));
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var8 = var4.getRank();
    java.util.List var9 = var4.getRank();
    var3.persistirDados(var4);
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    var12.persistirDados(var16);
    classes.Ranking var18 = new classes.Ranking();
    java.util.List var19 = var18.getRank();
    java.lang.String var20 = var18.toString();
    var12.persistirDados(var18);
    classes.Ranking var22 = var3.lerDados(var18);
    var1.persistirDados(var18);
    boolean var26 = var18.CheckRanking("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - -99", (java.lang.Integer)199);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.toString();
    int var6 = var2.getScore();
    int var7 = var2.getScore();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    java.lang.String var12 = var10.getName();
    classes.Gamer var15 = new classes.Gamer("hi!", 100);
    int var16 = var15.getScore();
    int var17 = var15.getScore();
    java.lang.String var18 = var15.getName();
    java.lang.String var19 = var15.getName();
    int var20 = var15.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var23.toString();
    int var26 = var23.getScore();
    java.lang.String var27 = var23.getName();
    java.lang.String var28 = var23.getName();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    java.lang.String var32 = var31.toString();
    int var33 = var31.getScore();
    java.lang.String var34 = var31.getName();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.toString();
    int var39 = var37.getScore();
    classes.Gamer var42 = new classes.Gamer("hi!", 100);
    int var43 = var37.compareTo(var42);
    int var44 = var31.compareTo(var37);
    int var45 = var23.compareTo(var31);
    int var46 = var15.compareTo(var23);
    int var47 = var10.compareTo(var23);
    int var48 = var23.getScore();
    classes.Gamer var51 = new classes.Gamer("hi!", 100);
    java.lang.String var52 = var51.toString();
    int var53 = var23.compareTo(var51);
    java.lang.String var54 = var23.getName();
    int var55 = var2.compareTo(var23);
    int var56 = var23.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var5.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var32.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var52.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 100);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var1.lerDados(var14);
    classes.Persistencia var18 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    var20.persistirDados(var27);
    classes.Ranking var32 = var18.lerDados(var27);
    classes.Ranking var33 = new classes.Ranking();
    java.lang.String var34 = var33.toString();
    java.util.List var35 = var33.getRank();
    classes.Ranking var36 = var18.lerDados(var33);
    var1.persistirDados(var36);
    classes.Ranking var38 = new classes.Ranking();
    boolean var41 = var38.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var44 = var38.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var45 = var38.getRank();
    java.util.List var46 = var38.getRank();
    classes.Ranking var47 = var1.lerDados(var38);
    java.lang.String var48 = var47.toString();
    java.util.List var49 = var47.getRank();
    java.lang.String var50 = var47.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.toString();
    int var21 = var19.getScore();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    int var25 = var19.compareTo(var24);
    java.lang.String var26 = var24.toString();
    java.lang.String var27 = var24.getName();
    classes.Gamer var30 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var33 = new classes.Gamer("hi!", 100);
    java.lang.String var34 = var33.toString();
    int var35 = var33.getScore();
    java.lang.String var36 = var33.getName();
    int var37 = var30.compareTo(var33);
    java.lang.String var38 = var30.getName();
    int var39 = var24.compareTo(var30);
    classes.Gamer var42 = new classes.Gamer("hi!", 10);
    classes.Gamer var45 = new classes.Gamer("hi!", 100);
    java.lang.String var46 = var45.getName();
    java.lang.String var47 = var45.toString();
    int var48 = var42.compareTo(var45);
    int var49 = var30.compareTo(var45);
    int var50 = var2.compareTo(var30);
    java.lang.String var51 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var20.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var26.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var34.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "1\u00BA -  - -1"+ "'", var38.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var47.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var51.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    boolean var20 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    boolean var23 = var12.CheckRanking("1\u00BA -  - 2", (java.lang.Integer)10);
    var1.persistirDados(var12);
    classes.Persistencia var26 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var26.lerDados(var27);
    classes.Persistencia var31 = new classes.Persistencia("hi!");
    classes.Ranking var32 = new classes.Ranking();
    boolean var35 = var32.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var38 = var32.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var39 = var31.lerDados(var32);
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    java.lang.String var42 = var40.toString();
    var31.persistirDados(var40);
    classes.Ranking var44 = new classes.Ranking();
    java.util.List var45 = var44.getRank();
    classes.Ranking var46 = var31.lerDados(var44);
    var26.persistirDados(var44);
    var1.persistirDados(var44);
    classes.Persistencia var50 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var52 = new classes.Persistencia("");
    classes.Ranking var53 = new classes.Ranking();
    java.util.List var54 = var53.getRank();
    var52.persistirDados(var53);
    classes.Ranking var56 = new classes.Ranking();
    java.util.List var57 = var56.getRank();
    classes.Ranking var58 = var52.lerDados(var56);
    var50.persistirDados(var58);
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.toString();
    boolean var64 = var58.CheckRanking("1\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-90));
    var1.persistirDados(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var13 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var15 = new classes.Persistencia("");
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    var15.persistirDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    classes.Ranking var21 = var15.lerDados(var19);
    classes.Ranking var22 = new classes.Ranking();
    java.util.List var23 = var22.getRank();
    java.lang.String var24 = var22.toString();
    java.lang.String var25 = var22.toString();
    var15.persistirDados(var22);
    classes.Ranking var27 = var13.lerDados(var22);
    java.lang.String var28 = var27.toString();
    classes.Ranking var29 = var11.lerDados(var27);
    classes.Persistencia var31 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var33 = new classes.Persistencia("");
    classes.Ranking var34 = new classes.Ranking();
    java.util.List var35 = var34.getRank();
    var33.persistirDados(var34);
    classes.Ranking var37 = new classes.Ranking();
    java.util.List var38 = var37.getRank();
    classes.Ranking var39 = var33.lerDados(var37);
    classes.Ranking var40 = new classes.Ranking();
    java.util.List var41 = var40.getRank();
    java.lang.String var42 = var40.toString();
    java.lang.String var43 = var40.toString();
    var33.persistirDados(var40);
    classes.Ranking var45 = var31.lerDados(var40);
    classes.Ranking var46 = new classes.Ranking();
    java.lang.String var47 = var46.toString();
    java.util.List var48 = var46.getRank();
    classes.Ranking var49 = var31.lerDados(var46);
    classes.Ranking var50 = var11.lerDados(var46);
    classes.Ranking var51 = new classes.Ranking();
    boolean var54 = var51.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var57 = var51.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    classes.Ranking var58 = var11.lerDados(var51);
    boolean var61 = var58.CheckRanking("1\u00BA - Nome: | Pontuacao: 2 - 2", (java.lang.Integer)10);
    var1.persistirDados(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10", 11);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getScore();
    java.lang.String var8 = var5.getName();
    classes.Gamer var11 = new classes.Gamer("hi!", 100);
    java.lang.String var12 = var11.toString();
    int var13 = var11.getScore();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    int var17 = var11.compareTo(var16);
    int var18 = var5.compareTo(var11);
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    java.lang.String var22 = var21.toString();
    int var23 = var21.getScore();
    int var24 = var11.compareTo(var21);
    java.lang.String var25 = var11.toString();
    java.lang.String var26 = var11.toString();
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = var29.toString();
    int var32 = var29.getScore();
    java.lang.String var33 = var29.getName();
    classes.Gamer var36 = new classes.Gamer("", 10);
    int var37 = var29.compareTo(var36);
    java.lang.String var38 = var29.toString();
    classes.Gamer var41 = new classes.Gamer("hi!", 100);
    java.lang.String var42 = var41.toString();
    int var43 = var41.getScore();
    java.lang.String var44 = var41.getName();
    classes.Gamer var47 = new classes.Gamer("hi!", 100);
    java.lang.String var48 = var47.toString();
    int var49 = var47.getScore();
    classes.Gamer var52 = new classes.Gamer("hi!", 100);
    int var53 = var47.compareTo(var52);
    int var54 = var41.compareTo(var47);
    int var55 = var41.getScore();
    classes.Gamer var58 = new classes.Gamer("hi!", 100);
    java.lang.String var59 = var58.getName();
    int var60 = var58.getScore();
    classes.Gamer var63 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var64 = var58.compareTo(var63);
    int var65 = var41.compareTo(var58);
    int var66 = var29.compareTo(var41);
    int var67 = var29.getScore();
    int var68 = var11.compareTo(var29);
    int var69 = var2.compareTo(var29);
    int var70 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var22.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var26.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var31.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var42.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var48.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 11);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.toString();
    classes.Gamer var13 = new classes.Gamer("hi!", 10);
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.getName();
    java.lang.String var18 = var16.toString();
    int var19 = var13.compareTo(var16);
    java.lang.String var20 = var16.getName();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    java.lang.String var24 = var23.getName();
    java.lang.String var25 = var23.toString();
    int var26 = var23.getScore();
    java.lang.String var27 = var23.getName();
    java.lang.String var28 = var23.getName();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    java.lang.String var32 = var31.toString();
    int var33 = var31.getScore();
    java.lang.String var34 = var31.getName();
    classes.Gamer var37 = new classes.Gamer("hi!", 100);
    java.lang.String var38 = var37.toString();
    int var39 = var37.getScore();
    classes.Gamer var42 = new classes.Gamer("hi!", 100);
    int var43 = var37.compareTo(var42);
    int var44 = var31.compareTo(var37);
    int var45 = var23.compareTo(var31);
    int var46 = var23.getScore();
    int var47 = var16.compareTo(var23);
    int var48 = var7.compareTo(var16);
    java.lang.String var49 = var16.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var10.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var18.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var32.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    classes.Ranking var0 = new classes.Ranking();
    java.util.List var1 = var0.getRank();
    java.lang.String var2 = var0.toString();
    java.util.List var3 = var0.getRank();
    java.lang.String var4 = var0.toString();
    boolean var7 = var0.CheckRanking("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)2);
    java.lang.String var8 = var0.toString();
    boolean var11 = var0.CheckRanking("Nome: Nome: hi!| Pontuacao: 100| Pontuacao: 98", (java.lang.Integer)98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2"+ "'", var8.equals("1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    classes.Operator var3 = new classes.Operator(101, (-1), (-12));

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100| Pontuacao: 99", 88);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.lang.String var18 = var17.toString();
    java.util.List var19 = var17.getRank();
    var8.persistirDados(var17);
    classes.Ranking var21 = var1.lerDados(var17);
    classes.Persistencia var23 = new classes.Persistencia("hi!");
    classes.Ranking var24 = new classes.Ranking();
    boolean var27 = var24.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var30 = var24.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var31 = var23.lerDados(var24);
    classes.Ranking var32 = new classes.Ranking();
    java.lang.String var33 = var32.toString();
    java.util.List var34 = var32.getRank();
    var23.persistirDados(var32);
    classes.Ranking var36 = new classes.Ranking();
    boolean var39 = var36.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var42 = var36.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var43 = var36.getRank();
    var23.persistirDados(var36);
    classes.Persistencia var46 = new classes.Persistencia("");
    classes.Ranking var47 = new classes.Ranking();
    java.util.List var48 = var47.getRank();
    var46.persistirDados(var47);
    classes.Ranking var50 = new classes.Ranking();
    java.util.List var51 = var50.getRank();
    classes.Ranking var52 = var46.lerDados(var50);
    boolean var55 = var52.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var56 = var23.lerDados(var52);
    boolean var59 = var52.CheckRanking("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", (java.lang.Integer)(-99));
    java.util.List var60 = var52.getRank();
    var1.persistirDados(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var1.lerDados(var14);
    classes.Persistencia var18 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    var20.persistirDados(var27);
    classes.Ranking var32 = var18.lerDados(var27);
    classes.Ranking var33 = new classes.Ranking();
    java.lang.String var34 = var33.toString();
    java.util.List var35 = var33.getRank();
    classes.Ranking var36 = var18.lerDados(var33);
    var1.persistirDados(var36);
    classes.Persistencia var39 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - hi! - -1");
    classes.Persistencia var41 = new classes.Persistencia("");
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    var41.persistirDados(var42);
    classes.Ranking var45 = new classes.Ranking();
    var41.persistirDados(var45);
    classes.Ranking var47 = var39.lerDados(var45);
    var1.persistirDados(var47);
    classes.Persistencia var50 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var51 = new classes.Ranking();
    java.util.List var52 = var51.getRank();
    classes.Ranking var53 = var50.lerDados(var51);
    classes.Persistencia var55 = new classes.Persistencia("hi!");
    classes.Ranking var56 = new classes.Ranking();
    boolean var59 = var56.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var62 = var56.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var63 = var55.lerDados(var56);
    classes.Ranking var64 = new classes.Ranking();
    java.util.List var65 = var64.getRank();
    java.lang.String var66 = var64.toString();
    var55.persistirDados(var64);
    classes.Ranking var68 = new classes.Ranking();
    java.util.List var69 = var68.getRank();
    classes.Ranking var70 = var55.lerDados(var68);
    var50.persistirDados(var68);
    classes.Persistencia var73 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var75 = new classes.Persistencia("");
    classes.Ranking var76 = new classes.Ranking();
    java.util.List var77 = var76.getRank();
    var75.persistirDados(var76);
    classes.Ranking var79 = new classes.Ranking();
    java.util.List var80 = var79.getRank();
    classes.Ranking var81 = var75.lerDados(var79);
    classes.Ranking var82 = new classes.Ranking();
    java.util.List var83 = var82.getRank();
    java.lang.String var84 = var82.toString();
    java.lang.String var85 = var82.toString();
    var75.persistirDados(var82);
    classes.Ranking var87 = var73.lerDados(var82);
    classes.Ranking var88 = new classes.Ranking();
    java.lang.String var89 = var88.toString();
    java.util.List var90 = var88.getRank();
    classes.Ranking var91 = var73.lerDados(var88);
    classes.Ranking var92 = var50.lerDados(var88);
    var1.persistirDados(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    java.lang.String var25 = var2.getName();
    int var26 = var2.getScore();
    java.lang.String var27 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    classes.Persistencia var1 = new classes.Persistencia("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 2| Pontuacao: 99");

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    classes.Ranking var11 = new classes.Ranking();
    boolean var14 = var11.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    boolean var17 = var11.CheckRanking("hi!", (java.lang.Integer)10);
    var1.persistirDados(var11);
    classes.Persistencia var20 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var22 = new classes.Persistencia("");
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    var22.persistirDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    classes.Ranking var28 = var22.lerDados(var26);
    var20.persistirDados(var28);
    java.lang.String var30 = var28.toString();
    java.lang.String var31 = var28.toString();
    boolean var34 = var28.CheckRanking("1\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-90));
    var1.persistirDados(var28);
    classes.Persistencia var37 = new classes.Persistencia("");
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    var37.persistirDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    classes.Ranking var43 = var37.lerDados(var41);
    classes.Persistencia var45 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var47 = new classes.Persistencia("");
    classes.Ranking var48 = new classes.Ranking();
    java.util.List var49 = var48.getRank();
    var47.persistirDados(var48);
    classes.Ranking var51 = new classes.Ranking();
    var47.persistirDados(var51);
    classes.Persistencia var54 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var56 = new classes.Persistencia("");
    classes.Ranking var57 = new classes.Ranking();
    java.util.List var58 = var57.getRank();
    var56.persistirDados(var57);
    classes.Ranking var60 = new classes.Ranking();
    java.util.List var61 = var60.getRank();
    classes.Ranking var62 = var56.lerDados(var60);
    classes.Ranking var63 = new classes.Ranking();
    java.util.List var64 = var63.getRank();
    java.lang.String var65 = var63.toString();
    java.lang.String var66 = var63.toString();
    var56.persistirDados(var63);
    classes.Ranking var68 = var54.lerDados(var63);
    java.lang.String var69 = var63.toString();
    var47.persistirDados(var63);
    classes.Ranking var71 = var45.lerDados(var63);
    var37.persistirDados(var63);
    classes.Persistencia var74 = new classes.Persistencia("");
    classes.Ranking var75 = new classes.Ranking();
    java.util.List var76 = var75.getRank();
    var74.persistirDados(var75);
    java.util.List var78 = var75.getRank();
    java.util.List var79 = var75.getRank();
    java.lang.String var80 = var75.toString();
    var37.persistirDados(var75);
    classes.Persistencia var83 = new classes.Persistencia("Nome: 1\u00BA -  - 2| Pontuacao: 2");
    classes.Ranking var84 = new classes.Ranking();
    boolean var87 = var84.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var88 = var84.getRank();
    java.lang.String var89 = var84.toString();
    classes.Ranking var90 = var83.lerDados(var84);
    boolean var93 = var84.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-10));
    var37.persistirDados(var84);
    classes.Ranking var95 = var1.lerDados(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var89.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    java.util.List var5 = var2.getRank();
    java.util.List var6 = var2.getRank();
    java.lang.String var7 = var2.toString();
    java.lang.String var8 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.toString();
    int var12 = var10.getScore();
    java.lang.String var13 = var10.getName();
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    classes.Gamer var21 = new classes.Gamer("hi!", 100);
    int var22 = var16.compareTo(var21);
    int var23 = var10.compareTo(var16);
    int var24 = var2.compareTo(var10);
    classes.Gamer var27 = new classes.Gamer("1\u00BA -  - 2", 1);
    int var28 = var2.compareTo(var27);
    java.lang.String var29 = var2.toString();
    classes.Gamer var32 = new classes.Gamer("hi!", 100);
    java.lang.String var33 = var32.getName();
    int var34 = var32.getScore();
    classes.Gamer var37 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var38 = var32.compareTo(var37);
    java.lang.String var39 = var37.toString();
    int var40 = var2.compareTo(var37);
    int var41 = var2.getScore();
    java.lang.String var42 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var29.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: 1\u00BA -  - -1| Pontuacao: 100"+ "'", var39.equals("Nome: 1\u00BA -  - -1| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var42.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    classes.Operator var3 = new classes.Operator((-1079), 110, (-98));

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    int var9 = var7.getScore();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    int var12 = var7.getScore();
    int var13 = var7.getScore();
    int var14 = var7.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    classes.Persistencia var1 = new classes.Persistencia("Nome: 1\u00BA - Nome: | Pontuacao: 2 - 22\u00BA -  - 11| Pontuacao: 100");

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var5 = new classes.Persistencia("");
    classes.Ranking var6 = new classes.Ranking();
    java.util.List var7 = var6.getRank();
    var5.persistirDados(var6);
    classes.Ranking var9 = new classes.Ranking();
    java.util.List var10 = var9.getRank();
    classes.Ranking var11 = var5.lerDados(var9);
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    java.lang.String var14 = var12.toString();
    java.lang.String var15 = var12.toString();
    var5.persistirDados(var12);
    classes.Ranking var17 = var3.lerDados(var12);
    java.lang.String var18 = var17.toString();
    classes.Ranking var19 = var1.lerDados(var17);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    classes.Ranking var29 = var23.lerDados(var27);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    java.lang.String var32 = var30.toString();
    java.lang.String var33 = var30.toString();
    var23.persistirDados(var30);
    classes.Ranking var35 = var21.lerDados(var30);
    classes.Ranking var36 = new classes.Ranking();
    java.lang.String var37 = var36.toString();
    java.util.List var38 = var36.getRank();
    classes.Ranking var39 = var21.lerDados(var36);
    classes.Ranking var40 = var1.lerDados(var36);
    boolean var43 = var36.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - -1 - 100", (java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.toString();
    java.util.List var7 = var2.getRank();
    java.util.List var8 = var2.getRank();
    java.util.List var9 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    classes.Persistencia var12 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    classes.Ranking var15 = var12.lerDados(var13);
    classes.Persistencia var17 = new classes.Persistencia("hi!");
    classes.Ranking var18 = new classes.Ranking();
    boolean var21 = var18.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var24 = var18.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var25 = var17.lerDados(var18);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    var17.persistirDados(var26);
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var17.lerDados(var30);
    var12.persistirDados(var30);
    var1.persistirDados(var30);
    classes.Persistencia var36 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var38 = new classes.Persistencia("");
    classes.Ranking var39 = new classes.Ranking();
    java.util.List var40 = var39.getRank();
    var38.persistirDados(var39);
    classes.Ranking var42 = new classes.Ranking();
    var38.persistirDados(var42);
    classes.Persistencia var45 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var47 = new classes.Persistencia("");
    classes.Ranking var48 = new classes.Ranking();
    java.util.List var49 = var48.getRank();
    var47.persistirDados(var48);
    classes.Ranking var51 = new classes.Ranking();
    java.util.List var52 = var51.getRank();
    classes.Ranking var53 = var47.lerDados(var51);
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    java.lang.String var56 = var54.toString();
    java.lang.String var57 = var54.toString();
    var47.persistirDados(var54);
    classes.Ranking var59 = var45.lerDados(var54);
    java.lang.String var60 = var54.toString();
    var38.persistirDados(var54);
    classes.Ranking var62 = var36.lerDados(var54);
    classes.Ranking var63 = var1.lerDados(var54);
    boolean var66 = var54.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)90);
    java.util.List var67 = var54.getRank();
    java.lang.String var68 = var54.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "1\u00BA - 1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100 - 90"+ "'", var68.equals("1\u00BA - 1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100 - 90"));

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - Nome: hi!| Pontuacao: 100 - 22\u00BA - Nome: 1\u00BA -  - -1| Pontuacao: 100 - 10");

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.lang.String var18 = var17.toString();
    java.util.List var19 = var17.getRank();
    var8.persistirDados(var17);
    classes.Ranking var21 = var1.lerDados(var17);
    boolean var24 = var17.CheckRanking("1\u00BA - Nome: | Pontuacao: 2 - 22\u00BA -  - 11", (java.lang.Integer)(-108));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    java.lang.String var11 = var2.toString();
    classes.Gamer var14 = new classes.Gamer("hi!", 100);
    java.lang.String var15 = var14.toString();
    int var16 = var14.getScore();
    java.lang.String var17 = var14.getName();
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    int var27 = var14.compareTo(var20);
    int var28 = var14.getScore();
    classes.Gamer var31 = new classes.Gamer("hi!", 100);
    java.lang.String var32 = var31.getName();
    int var33 = var31.getScore();
    classes.Gamer var36 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var37 = var31.compareTo(var36);
    int var38 = var14.compareTo(var31);
    int var39 = var2.compareTo(var14);
    classes.Gamer var42 = new classes.Gamer("hi!", 100);
    java.lang.String var43 = var42.getName();
    int var44 = var42.getScore();
    int var45 = var42.getScore();
    int var46 = var2.compareTo(var42);
    java.lang.String var47 = var2.toString();
    int var48 = var2.getScore();
    int var49 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var15.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var47.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 100);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    classes.Operator var3 = new classes.Operator(199, (-989), (-10));

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    classes.Gamer var2 = new classes.Gamer("1\u00BA -  - 2", (-100));

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var7.getScore();
    int var11 = var2.compareTo(var7);
    java.lang.String var12 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test451");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.toString();
    java.lang.String var7 = var2.toString();
    java.lang.String var8 = var2.getName();
    int var9 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var7.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test452");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA -  - 1");

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test453");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    java.util.List var6 = var5.getRank();
    classes.Ranking var7 = var1.lerDados(var5);
    classes.Persistencia var9 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var11 = new classes.Persistencia("");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    var11.persistirDados(var12);
    classes.Ranking var15 = new classes.Ranking();
    var11.persistirDados(var15);
    classes.Persistencia var18 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var20 = new classes.Persistencia("");
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    var20.persistirDados(var21);
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    classes.Ranking var26 = var20.lerDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    var20.persistirDados(var27);
    classes.Ranking var32 = var18.lerDados(var27);
    java.lang.String var33 = var27.toString();
    var11.persistirDados(var27);
    classes.Ranking var35 = var9.lerDados(var27);
    var1.persistirDados(var27);
    classes.Persistencia var38 = new classes.Persistencia("");
    classes.Ranking var39 = new classes.Ranking();
    java.util.List var40 = var39.getRank();
    var38.persistirDados(var39);
    java.util.List var42 = var39.getRank();
    java.util.List var43 = var39.getRank();
    java.lang.String var44 = var39.toString();
    var1.persistirDados(var39);
    classes.Persistencia var47 = new classes.Persistencia("Nome: 1\u00BA -  - 2| Pontuacao: 2");
    classes.Ranking var48 = new classes.Ranking();
    boolean var51 = var48.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var52 = var48.getRank();
    java.lang.String var53 = var48.toString();
    classes.Ranking var54 = var47.lerDados(var48);
    boolean var57 = var48.CheckRanking("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 100", (java.lang.Integer)(-10));
    var1.persistirDados(var48);
    classes.Persistencia var60 = new classes.Persistencia("hi!");
    classes.Ranking var61 = new classes.Ranking();
    boolean var64 = var61.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var67 = var61.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var68 = var60.lerDados(var61);
    boolean var71 = var68.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10", (java.lang.Integer)90);
    var1.persistirDados(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var53.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    classes.Operator var3 = new classes.Operator(2, 2, 90);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test455");


    classes.Operator var3 = new classes.Operator((-2), 90, (-99));
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test456");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -1", 8910);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test457");


    classes.Gamer var2 = new classes.Gamer("", 1);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: | Pontuacao: 1"+ "'", var3.equals("Nome: | Pontuacao: 1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test458");


    classes.Operator var3 = new classes.Operator(99, (-90), 190);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test459");


    classes.Gamer var2 = new classes.Gamer("Nome: Nome: | Pontuacao: 10| Pontuacao: 10", 1088);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test460");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Persistencia var8 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var10 = new classes.Persistencia("");
    classes.Ranking var11 = new classes.Ranking();
    java.util.List var12 = var11.getRank();
    var10.persistirDados(var11);
    classes.Ranking var14 = new classes.Ranking();
    java.util.List var15 = var14.getRank();
    classes.Ranking var16 = var10.lerDados(var14);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    java.lang.String var19 = var17.toString();
    java.lang.String var20 = var17.toString();
    var10.persistirDados(var17);
    classes.Ranking var22 = var8.lerDados(var17);
    java.lang.String var23 = var17.toString();
    var1.persistirDados(var17);
    java.lang.String var25 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test461");


    classes.Persistencia var1 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    classes.Ranking var9 = var3.lerDados(var7);
    var1.persistirDados(var9);
    java.lang.String var11 = var9.toString();
    java.lang.String var12 = var9.toString();
    java.util.List var13 = var9.getRank();
    java.lang.String var14 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test462");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    boolean var7 = var2.CheckRanking("", (java.lang.Integer)2);
    java.lang.String var8 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "1\u00BA -  - 2"+ "'", var8.equals("1\u00BA -  - 2"));

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test463");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Persistencia var3 = new classes.Persistencia("hi!");
    classes.Ranking var4 = new classes.Ranking();
    boolean var7 = var4.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var10 = var4.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var11 = var3.lerDados(var4);
    var1.persistirDados(var4);
    boolean var15 = var4.CheckRanking("1\u00BA -  - 11", (java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test464");


    classes.Operator var3 = new classes.Operator(101, 90, (-10));
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test465");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    classes.Ranking var6 = var3.lerDados(var4);
    java.lang.String var7 = var6.toString();
    java.util.List var8 = var6.getRank();
    var1.persistirDados(var6);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    classes.Ranking var14 = var11.lerDados(var12);
    classes.Persistencia var16 = new classes.Persistencia("hi!");
    classes.Ranking var17 = new classes.Ranking();
    boolean var20 = var17.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var23 = var17.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var24 = var16.lerDados(var17);
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    java.lang.String var27 = var25.toString();
    var16.persistirDados(var25);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var16.lerDados(var29);
    var11.persistirDados(var29);
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    java.lang.String var38 = var35.toString();
    java.lang.String var39 = var35.toString();
    classes.Ranking var40 = var11.lerDados(var35);
    boolean var43 = var35.CheckRanking("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99", (java.lang.Integer)(-1));
    var1.persistirDados(var35);
    classes.Persistencia var46 = new classes.Persistencia("hi!");
    classes.Ranking var47 = new classes.Ranking();
    boolean var50 = var47.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var53 = var47.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var54 = var46.lerDados(var47);
    classes.Persistencia var56 = new classes.Persistencia("hi!");
    classes.Ranking var57 = new classes.Ranking();
    boolean var60 = var57.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var63 = var57.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var64 = var56.lerDados(var57);
    classes.Ranking var65 = new classes.Ranking();
    java.lang.String var66 = var65.toString();
    java.util.List var67 = var65.getRank();
    var56.persistirDados(var65);
    classes.Persistencia var70 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var72 = new classes.Persistencia("");
    classes.Ranking var73 = new classes.Ranking();
    java.util.List var74 = var73.getRank();
    var72.persistirDados(var73);
    classes.Ranking var76 = new classes.Ranking();
    java.util.List var77 = var76.getRank();
    classes.Ranking var78 = var72.lerDados(var76);
    var70.persistirDados(var78);
    java.lang.String var80 = var78.toString();
    classes.Ranking var81 = var56.lerDados(var78);
    classes.Persistencia var83 = new classes.Persistencia("hi!");
    classes.Persistencia var85 = new classes.Persistencia("hi!");
    classes.Ranking var86 = new classes.Ranking();
    boolean var89 = var86.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var92 = var86.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var93 = var85.lerDados(var86);
    var83.persistirDados(var86);
    classes.Ranking var95 = var56.lerDados(var86);
    classes.Ranking var96 = var46.lerDados(var86);
    classes.Ranking var97 = var1.lerDados(var86);
    java.lang.String var98 = var86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var98.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test466");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - -1 - -12\u00BA - 1\u00BA -  - 2 - 1", (-98));

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test467");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA -  - 2 - 11", 100);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test468");


    classes.Operator var3 = new classes.Operator(1, (-90), 1089);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test469");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.lang.String var11 = var10.toString();
    java.util.List var12 = var10.getRank();
    var1.persistirDados(var10);
    classes.Ranking var14 = new classes.Ranking();
    boolean var17 = var14.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var20 = var14.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var21 = var14.getRank();
    var1.persistirDados(var14);
    classes.Persistencia var24 = new classes.Persistencia("");
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    var24.persistirDados(var25);
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    classes.Ranking var30 = var24.lerDados(var28);
    java.util.List var31 = var30.getRank();
    classes.Ranking var32 = var1.lerDados(var30);
    classes.Persistencia var34 = new classes.Persistencia("hi!");
    classes.Ranking var35 = new classes.Ranking();
    boolean var38 = var35.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var41 = var35.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var42 = var34.lerDados(var35);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    java.lang.String var45 = var43.toString();
    var34.persistirDados(var43);
    classes.Ranking var47 = new classes.Ranking();
    java.util.List var48 = var47.getRank();
    classes.Ranking var49 = var34.lerDados(var47);
    classes.Ranking var50 = new classes.Ranking();
    java.lang.String var51 = var50.toString();
    java.util.List var52 = var50.getRank();
    boolean var55 = var50.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    classes.Ranking var56 = var34.lerDados(var50);
    classes.Persistencia var58 = new classes.Persistencia("");
    classes.Ranking var59 = new classes.Ranking();
    java.util.List var60 = var59.getRank();
    var58.persistirDados(var59);
    classes.Ranking var62 = new classes.Ranking();
    java.util.List var63 = var62.getRank();
    classes.Ranking var64 = var58.lerDados(var62);
    boolean var67 = var64.CheckRanking("", (java.lang.Integer)(-1));
    java.lang.String var68 = var64.toString();
    classes.Ranking var69 = var34.lerDados(var64);
    java.util.List var70 = var69.getRank();
    classes.Ranking var71 = var1.lerDados(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "1\u00BA -  - -1"+ "'", var68.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test470");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getName();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    java.lang.String var8 = var7.getName();
    java.lang.String var9 = var7.toString();
    int var10 = var2.compareTo(var7);
    java.lang.String var11 = var7.toString();
    java.lang.String var12 = var7.toString();
    java.lang.String var13 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var11.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test471");


    classes.Persistencia var1 = new classes.Persistencia("");
    classes.Ranking var2 = new classes.Ranking();
    java.util.List var3 = var2.getRank();
    var1.persistirDados(var2);
    classes.Ranking var5 = new classes.Ranking();
    var1.persistirDados(var5);
    classes.Ranking var7 = new classes.Ranking();
    java.util.List var8 = var7.getRank();
    java.lang.String var9 = var7.toString();
    var1.persistirDados(var7);
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    boolean var16 = var13.CheckRanking("1\u00BA - 1\u00BA -  - -1 - -1", (java.lang.Integer)10);
    java.util.List var17 = var13.getRank();
    java.util.List var18 = var13.getRank();
    var12.persistirDados(var13);
    classes.Persistencia var21 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var23 = new classes.Persistencia("");
    classes.Ranking var24 = new classes.Ranking();
    java.util.List var25 = var24.getRank();
    var23.persistirDados(var24);
    classes.Ranking var27 = new classes.Ranking();
    var23.persistirDados(var27);
    classes.Persistencia var30 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var32 = new classes.Persistencia("");
    classes.Ranking var33 = new classes.Ranking();
    java.util.List var34 = var33.getRank();
    var32.persistirDados(var33);
    classes.Ranking var36 = new classes.Ranking();
    java.util.List var37 = var36.getRank();
    classes.Ranking var38 = var32.lerDados(var36);
    classes.Ranking var39 = new classes.Ranking();
    java.util.List var40 = var39.getRank();
    java.lang.String var41 = var39.toString();
    java.lang.String var42 = var39.toString();
    var32.persistirDados(var39);
    classes.Ranking var44 = var30.lerDados(var39);
    java.lang.String var45 = var39.toString();
    var23.persistirDados(var39);
    classes.Ranking var47 = var21.lerDados(var39);
    classes.Persistencia var49 = new classes.Persistencia("");
    classes.Ranking var50 = new classes.Ranking();
    java.util.List var51 = var50.getRank();
    var49.persistirDados(var50);
    java.lang.String var53 = var50.toString();
    java.util.List var54 = var50.getRank();
    classes.Ranking var55 = var21.lerDados(var50);
    java.util.List var56 = var55.getRank();
    java.util.List var57 = var55.getRank();
    classes.Ranking var58 = var12.lerDados(var55);
    var1.persistirDados(var55);
    classes.Persistencia var61 = new classes.Persistencia("");
    classes.Persistencia var63 = new classes.Persistencia("");
    classes.Ranking var64 = new classes.Ranking();
    java.util.List var65 = var64.getRank();
    var63.persistirDados(var64);
    classes.Ranking var67 = new classes.Ranking();
    var63.persistirDados(var67);
    classes.Persistencia var70 = new classes.Persistencia("hi!");
    classes.Ranking var71 = new classes.Ranking();
    boolean var74 = var71.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var77 = var71.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var78 = var70.lerDados(var71);
    classes.Ranking var79 = new classes.Ranking();
    java.lang.String var80 = var79.toString();
    java.util.List var81 = var79.getRank();
    var70.persistirDados(var79);
    classes.Ranking var83 = var63.lerDados(var79);
    var61.persistirDados(var83);
    classes.Ranking var85 = var1.lerDados(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test472");


    classes.Operator var3 = new classes.Operator((-12), 1, 99);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test473");


    classes.Gamer var2 = new classes.Gamer("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99", 90);
    classes.Gamer var5 = new classes.Gamer("hi!", 100);
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.getName();
    classes.Gamer var10 = new classes.Gamer("hi!", 100);
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = var10.toString();
    int var13 = var5.compareTo(var10);
    int var14 = var5.getScore();
    java.lang.String var15 = var5.getName();
    int var16 = var2.compareTo(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 10);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test474");


    classes.Operator var3 = new classes.Operator(98, (-100), 11);
    int var4 = var3.getResult();
    int var5 = var3.getResult();
    int var6 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test475");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Persistencia var25 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var27 = new classes.Persistencia("");
    classes.Ranking var28 = new classes.Ranking();
    java.util.List var29 = var28.getRank();
    var27.persistirDados(var28);
    classes.Ranking var31 = new classes.Ranking();
    java.util.List var32 = var31.getRank();
    classes.Ranking var33 = var27.lerDados(var31);
    var25.persistirDados(var33);
    java.lang.String var35 = var33.toString();
    classes.Ranking var36 = var11.lerDados(var33);
    classes.Persistencia var38 = new classes.Persistencia("hi!");
    classes.Persistencia var40 = new classes.Persistencia("hi!");
    classes.Ranking var41 = new classes.Ranking();
    boolean var44 = var41.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var47 = var41.CheckRanking("hi!", (java.lang.Integer)(-1));
    classes.Ranking var48 = var40.lerDados(var41);
    var38.persistirDados(var41);
    classes.Ranking var50 = var11.lerDados(var41);
    classes.Ranking var51 = var1.lerDados(var41);
    classes.Persistencia var53 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    classes.Ranking var56 = var53.lerDados(var54);
    classes.Persistencia var58 = new classes.Persistencia("hi!");
    classes.Ranking var59 = new classes.Ranking();
    boolean var62 = var59.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var65 = var59.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var66 = var58.lerDados(var59);
    classes.Ranking var67 = new classes.Ranking();
    java.util.List var68 = var67.getRank();
    java.lang.String var69 = var67.toString();
    var58.persistirDados(var67);
    classes.Ranking var71 = new classes.Ranking();
    java.util.List var72 = var71.getRank();
    classes.Ranking var73 = var58.lerDados(var71);
    var53.persistirDados(var71);
    classes.Persistencia var76 = new classes.Persistencia("");
    classes.Ranking var77 = new classes.Ranking();
    java.util.List var78 = var77.getRank();
    var76.persistirDados(var77);
    java.lang.String var80 = var77.toString();
    java.lang.String var81 = var77.toString();
    classes.Ranking var82 = var53.lerDados(var77);
    var1.persistirDados(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test476");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    classes.Ranking var6 = var3.lerDados(var4);
    classes.Persistencia var8 = new classes.Persistencia("hi!");
    classes.Ranking var9 = new classes.Ranking();
    boolean var12 = var9.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var15 = var9.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var16 = var8.lerDados(var9);
    classes.Ranking var17 = new classes.Ranking();
    java.util.List var18 = var17.getRank();
    java.lang.String var19 = var17.toString();
    var8.persistirDados(var17);
    classes.Ranking var21 = new classes.Ranking();
    java.util.List var22 = var21.getRank();
    classes.Ranking var23 = var8.lerDados(var21);
    var3.persistirDados(var21);
    classes.Persistencia var26 = new classes.Persistencia("");
    classes.Ranking var27 = new classes.Ranking();
    java.util.List var28 = var27.getRank();
    var26.persistirDados(var27);
    java.lang.String var30 = var27.toString();
    java.lang.String var31 = var27.toString();
    classes.Ranking var32 = var3.lerDados(var27);
    boolean var35 = var27.CheckRanking("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99", (java.lang.Integer)(-1));
    var1.persistirDados(var27);
    classes.Persistencia var38 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var40 = new classes.Persistencia("");
    classes.Ranking var41 = new classes.Ranking();
    java.util.List var42 = var41.getRank();
    var40.persistirDados(var41);
    classes.Ranking var44 = new classes.Ranking();
    java.util.List var45 = var44.getRank();
    classes.Ranking var46 = var40.lerDados(var44);
    var38.persistirDados(var46);
    java.lang.String var48 = var46.toString();
    java.lang.String var49 = var46.toString();
    boolean var52 = var46.CheckRanking("Nome: | Pontuacao: 2", (java.lang.Integer)2);
    boolean var55 = var46.CheckRanking("", (java.lang.Integer)1);
    var1.persistirDados(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test477");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.toString();
    int var11 = var7.getScore();
    java.lang.String var12 = var7.toString();
    int var13 = var7.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var10.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var12.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 100);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test478");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    int var16 = var2.getScore();
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.getName();
    int var21 = var19.getScore();
    classes.Gamer var24 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var25 = var19.compareTo(var24);
    int var26 = var2.compareTo(var19);
    int var27 = var19.getScore();
    classes.Gamer var30 = new classes.Gamer("1\u00BA -  - -1", 100);
    int var31 = var19.compareTo(var30);
    int var32 = var19.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test479");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("", 10);
    int var10 = var2.compareTo(var9);
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    java.lang.String var14 = var13.toString();
    int var15 = var13.getScore();
    java.lang.String var16 = var13.getName();
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.toString();
    int var21 = var19.getScore();
    classes.Gamer var24 = new classes.Gamer("hi!", 100);
    int var25 = var19.compareTo(var24);
    int var26 = var13.compareTo(var19);
    classes.Gamer var29 = new classes.Gamer("hi!", 100);
    java.lang.String var30 = var29.toString();
    int var31 = var29.getScore();
    int var32 = var19.compareTo(var29);
    java.lang.String var33 = var19.toString();
    int var34 = var9.compareTo(var19);
    java.lang.String var35 = var9.toString();
    classes.Gamer var38 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", 98);
    int var39 = var9.compareTo(var38);
    java.lang.String var40 = var38.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-90));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var20.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Nome: | Pontuacao: 10"+ "'", var35.equals("Nome: | Pontuacao: 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"+ "'", var40.equals("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10"));

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test480");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.getName();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.toString();
    java.lang.String var7 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var6.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test481");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    java.lang.String var5 = var2.getName();
    classes.Gamer var8 = new classes.Gamer("hi!", 100);
    java.lang.String var9 = var8.toString();
    int var10 = var8.getScore();
    classes.Gamer var13 = new classes.Gamer("hi!", 100);
    int var14 = var8.compareTo(var13);
    int var15 = var2.compareTo(var8);
    classes.Gamer var18 = new classes.Gamer("hi!", 100);
    java.lang.String var19 = var18.toString();
    int var20 = var18.getScore();
    classes.Gamer var23 = new classes.Gamer("hi!", 100);
    int var24 = var18.compareTo(var23);
    java.lang.String var25 = var23.toString();
    int var26 = var2.compareTo(var23);
    classes.Gamer var29 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var32 = new classes.Gamer("hi!", 100);
    java.lang.String var33 = var32.toString();
    int var34 = var32.getScore();
    java.lang.String var35 = var32.getName();
    int var36 = var29.compareTo(var32);
    int var37 = var29.getScore();
    int var38 = var2.compareTo(var29);
    classes.Gamer var41 = new classes.Gamer("hi!", 10);
    classes.Gamer var44 = new classes.Gamer("hi!", 100);
    java.lang.String var45 = var44.getName();
    java.lang.String var46 = var44.toString();
    int var47 = var41.compareTo(var44);
    java.lang.String var48 = var44.getName();
    classes.Gamer var51 = new classes.Gamer("hi!", 100);
    java.lang.String var52 = var51.getName();
    java.lang.String var53 = var51.toString();
    int var54 = var51.getScore();
    java.lang.String var55 = var51.getName();
    java.lang.String var56 = var51.getName();
    classes.Gamer var59 = new classes.Gamer("hi!", 100);
    java.lang.String var60 = var59.toString();
    int var61 = var59.getScore();
    java.lang.String var62 = var59.getName();
    classes.Gamer var65 = new classes.Gamer("hi!", 100);
    java.lang.String var66 = var65.toString();
    int var67 = var65.getScore();
    classes.Gamer var70 = new classes.Gamer("hi!", 100);
    int var71 = var65.compareTo(var70);
    int var72 = var59.compareTo(var65);
    int var73 = var51.compareTo(var59);
    int var74 = var51.getScore();
    int var75 = var44.compareTo(var51);
    int var76 = var44.getScore();
    int var77 = var2.compareTo(var44);
    int var78 = var44.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var19.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var25.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var33.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var46.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var53.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var60.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var66.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 100);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test482");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - Nome: hi!| Pontuacao: 0 - 2");

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test483");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - 1\u00BA -  - -1 - -12\u00BA -  - 10");
    classes.Persistencia var3 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    classes.Ranking var6 = var3.lerDados(var4);
    java.lang.String var7 = var6.toString();
    java.util.List var8 = var6.getRank();
    var1.persistirDados(var6);
    classes.Persistencia var11 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Ranking var12 = new classes.Ranking();
    java.util.List var13 = var12.getRank();
    classes.Ranking var14 = var11.lerDados(var12);
    classes.Persistencia var16 = new classes.Persistencia("hi!");
    classes.Ranking var17 = new classes.Ranking();
    boolean var20 = var17.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var23 = var17.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var24 = var16.lerDados(var17);
    classes.Ranking var25 = new classes.Ranking();
    java.util.List var26 = var25.getRank();
    java.lang.String var27 = var25.toString();
    var16.persistirDados(var25);
    classes.Ranking var29 = new classes.Ranking();
    java.util.List var30 = var29.getRank();
    classes.Ranking var31 = var16.lerDados(var29);
    var11.persistirDados(var29);
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    java.lang.String var38 = var35.toString();
    java.lang.String var39 = var35.toString();
    classes.Ranking var40 = var11.lerDados(var35);
    boolean var43 = var35.CheckRanking("Nome: Nome: 1\u00BA -  - 2| Pontuacao: 1| Pontuacao: -99", (java.lang.Integer)(-1));
    var1.persistirDados(var35);
    java.util.List var45 = var35.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test484");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.getName();
    classes.Gamer var13 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var16 = new classes.Gamer("hi!", 100);
    java.lang.String var17 = var16.toString();
    int var18 = var16.getScore();
    java.lang.String var19 = var16.getName();
    int var20 = var13.compareTo(var16);
    java.lang.String var21 = var13.getName();
    int var22 = var7.compareTo(var13);
    classes.Gamer var25 = new classes.Gamer("hi!", 10);
    classes.Gamer var28 = new classes.Gamer("hi!", 100);
    java.lang.String var29 = var28.getName();
    java.lang.String var30 = var28.toString();
    int var31 = var25.compareTo(var28);
    int var32 = var13.compareTo(var28);
    classes.Gamer var35 = new classes.Gamer("1\u00BA -  - -1", 100);
    classes.Gamer var38 = new classes.Gamer("hi!", 100);
    java.lang.String var39 = var38.toString();
    int var40 = var38.getScore();
    java.lang.String var41 = var38.getName();
    int var42 = var35.compareTo(var38);
    int var43 = var35.getScore();
    classes.Gamer var46 = new classes.Gamer("hi!", 100);
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    classes.Gamer var51 = new classes.Gamer("hi!", 100);
    java.lang.String var52 = var51.getName();
    int var53 = var51.getScore();
    int var54 = var51.getScore();
    int var55 = var46.compareTo(var51);
    int var56 = var35.compareTo(var46);
    int var57 = var13.compareTo(var46);
    int var58 = var46.getScore();
    int var59 = var46.getScore();
    int var60 = var46.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var17.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1\u00BA -  - -1"+ "'", var21.equals("1\u00BA -  - -1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var47.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var48.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 100);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test485");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.toString();
    int var4 = var2.getScore();
    classes.Gamer var7 = new classes.Gamer("hi!", 100);
    int var8 = var2.compareTo(var7);
    java.lang.String var9 = var7.toString();
    java.lang.String var10 = var7.toString();
    int var11 = var7.getScore();
    int var12 = var7.getScore();
    java.lang.String var13 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var3.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var9.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var10.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test486");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - Nome: hi!| Pontuacao: 0 - 2", (-2));

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test487");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Persistencia var11 = new classes.Persistencia("hi!");
    classes.Ranking var12 = new classes.Ranking();
    boolean var15 = var12.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var18 = var12.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var19 = var11.lerDados(var12);
    classes.Ranking var20 = new classes.Ranking();
    java.lang.String var21 = var20.toString();
    java.util.List var22 = var20.getRank();
    var11.persistirDados(var20);
    classes.Ranking var24 = new classes.Ranking();
    boolean var27 = var24.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var30 = var24.CheckRanking("hi!", (java.lang.Integer)(-1));
    java.util.List var31 = var24.getRank();
    var11.persistirDados(var24);
    classes.Persistencia var34 = new classes.Persistencia("");
    classes.Ranking var35 = new classes.Ranking();
    java.util.List var36 = var35.getRank();
    var34.persistirDados(var35);
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    classes.Ranking var40 = var34.lerDados(var38);
    boolean var43 = var40.CheckRanking("", (java.lang.Integer)(-1));
    classes.Ranking var44 = var11.lerDados(var40);
    var1.persistirDados(var44);
    java.util.List var46 = var44.getRank();
    boolean var49 = var44.CheckRanking("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 2", (java.lang.Integer)(-99));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test488");


    classes.Ranking var0 = new classes.Ranking();
    boolean var3 = var0.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var6 = var0.CheckRanking("Nome: hi!| Pontuacao: 100", (java.lang.Integer)100);
    java.util.List var7 = var0.getRank();
    boolean var10 = var0.CheckRanking("Nome: | Pontuacao: -1", (java.lang.Integer)(-90));
    java.lang.String var11 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 1003\u00BA - Nome: | Pontuacao: -1 - -90"+ "'", var11.equals("1\u00BA - hi! - 02\u00BA - Nome: hi!| Pontuacao: 100 - 1003\u00BA - Nome: | Pontuacao: -1 - -90"));

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test489");


    classes.Operator var3 = new classes.Operator(0, 99, 99);
    int var4 = var3.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test490");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 102\u00BA - hi! - 10| Pontuacao: 98", (-1));

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test491");


    classes.Persistencia var1 = new classes.Persistencia("hi!");
    classes.Ranking var2 = new classes.Ranking();
    boolean var5 = var2.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var8 = var2.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var9 = var1.lerDados(var2);
    classes.Ranking var10 = new classes.Ranking();
    java.util.List var11 = var10.getRank();
    java.lang.String var12 = var10.toString();
    var1.persistirDados(var10);
    classes.Persistencia var15 = new classes.Persistencia("hi!");
    classes.Persistencia var17 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var19 = new classes.Persistencia("");
    classes.Ranking var20 = new classes.Ranking();
    java.util.List var21 = var20.getRank();
    var19.persistirDados(var20);
    classes.Ranking var23 = new classes.Ranking();
    java.util.List var24 = var23.getRank();
    classes.Ranking var25 = var19.lerDados(var23);
    classes.Ranking var26 = new classes.Ranking();
    java.util.List var27 = var26.getRank();
    java.lang.String var28 = var26.toString();
    java.lang.String var29 = var26.toString();
    var19.persistirDados(var26);
    classes.Ranking var31 = var17.lerDados(var26);
    boolean var34 = var26.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    var15.persistirDados(var26);
    classes.Ranking var36 = var1.lerDados(var26);
    classes.Persistencia var38 = new classes.Persistencia("");
    classes.Ranking var39 = new classes.Ranking();
    java.util.List var40 = var39.getRank();
    var38.persistirDados(var39);
    classes.Ranking var42 = new classes.Ranking();
    java.util.List var43 = var42.getRank();
    classes.Ranking var44 = var38.lerDados(var42);
    java.util.List var45 = var44.getRank();
    var1.persistirDados(var44);
    classes.Persistencia var48 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var50 = new classes.Persistencia("");
    classes.Ranking var51 = new classes.Ranking();
    java.util.List var52 = var51.getRank();
    var50.persistirDados(var51);
    classes.Ranking var54 = new classes.Ranking();
    java.util.List var55 = var54.getRank();
    classes.Ranking var56 = var50.lerDados(var54);
    classes.Ranking var57 = new classes.Ranking();
    java.util.List var58 = var57.getRank();
    java.lang.String var59 = var57.toString();
    java.lang.String var60 = var57.toString();
    var50.persistirDados(var57);
    classes.Ranking var62 = var48.lerDados(var57);
    boolean var65 = var57.CheckRanking("", (java.lang.Integer)1);
    java.util.List var66 = var57.getRank();
    var1.persistirDados(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test492");


    classes.Persistencia var1 = new classes.Persistencia("1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1");
    classes.Persistencia var3 = new classes.Persistencia("");
    classes.Ranking var4 = new classes.Ranking();
    java.util.List var5 = var4.getRank();
    var3.persistirDados(var4);
    classes.Ranking var7 = new classes.Ranking();
    var3.persistirDados(var7);
    classes.Persistencia var10 = new classes.Persistencia("1\u00BA -  - -1");
    classes.Persistencia var12 = new classes.Persistencia("");
    classes.Ranking var13 = new classes.Ranking();
    java.util.List var14 = var13.getRank();
    var12.persistirDados(var13);
    classes.Ranking var16 = new classes.Ranking();
    java.util.List var17 = var16.getRank();
    classes.Ranking var18 = var12.lerDados(var16);
    classes.Ranking var19 = new classes.Ranking();
    java.util.List var20 = var19.getRank();
    java.lang.String var21 = var19.toString();
    java.lang.String var22 = var19.toString();
    var12.persistirDados(var19);
    classes.Ranking var24 = var10.lerDados(var19);
    java.lang.String var25 = var19.toString();
    var3.persistirDados(var19);
    classes.Ranking var27 = var1.lerDados(var19);
    classes.Persistencia var29 = new classes.Persistencia("");
    classes.Ranking var30 = new classes.Ranking();
    java.util.List var31 = var30.getRank();
    var29.persistirDados(var30);
    java.lang.String var33 = var30.toString();
    java.util.List var34 = var30.getRank();
    classes.Ranking var35 = var1.lerDados(var30);
    classes.Persistencia var37 = new classes.Persistencia("");
    classes.Ranking var38 = new classes.Ranking();
    java.util.List var39 = var38.getRank();
    var37.persistirDados(var38);
    classes.Ranking var41 = new classes.Ranking();
    var37.persistirDados(var41);
    classes.Ranking var43 = new classes.Ranking();
    java.util.List var44 = var43.getRank();
    java.lang.String var45 = var43.toString();
    var37.persistirDados(var43);
    classes.Persistencia var48 = new classes.Persistencia("hi!");
    classes.Ranking var49 = new classes.Ranking();
    boolean var52 = var49.CheckRanking("hi!", (java.lang.Integer)0);
    boolean var55 = var49.CheckRanking("1\u00BA -  - -1", (java.lang.Integer)(-1));
    classes.Ranking var56 = var48.lerDados(var49);
    classes.Ranking var57 = new classes.Ranking();
    java.lang.String var58 = var57.toString();
    java.util.List var59 = var57.getRank();
    var48.persistirDados(var57);
    classes.Persistencia var62 = new classes.Persistencia("Nome: hi!| Pontuacao: 100");
    classes.Persistencia var64 = new classes.Persistencia("");
    classes.Ranking var65 = new classes.Ranking();
    java.util.List var66 = var65.getRank();
    var64.persistirDados(var65);
    classes.Ranking var68 = new classes.Ranking();
    java.util.List var69 = var68.getRank();
    classes.Ranking var70 = var64.lerDados(var68);
    var62.persistirDados(var70);
    java.lang.String var72 = var70.toString();
    classes.Ranking var73 = var48.lerDados(var70);
    classes.Ranking var74 = var37.lerDados(var73);
    classes.Ranking var75 = var1.lerDados(var74);
    java.util.List var76 = var75.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test493");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - 10", (-1));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test494");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - 1\u00BA - 1\u00BA - hi! - 02\u00BA - 1\u00BA -  - -1 - -1 - 2 - 100", 0);
    int var3 = var2.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test495");


    classes.Gamer var2 = new classes.Gamer("1\u00BA - hi! - 02\u00BA - hi! - -1", (-90));
    java.lang.String var3 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "1\u00BA - hi! - 02\u00BA - hi! - -1"+ "'", var3.equals("1\u00BA - hi! - 02\u00BA - hi! - -1"));

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test496");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    classes.Gamer var6 = new classes.Gamer("hi!", 100);
    java.lang.String var7 = var6.getName();
    java.lang.String var8 = var6.toString();
    classes.Gamer var11 = new classes.Gamer("hi!", 100);
    java.lang.String var12 = var11.getName();
    java.lang.String var13 = var11.toString();
    int var14 = var11.getScore();
    int var15 = var6.compareTo(var11);
    java.lang.String var16 = var11.toString();
    int var17 = var2.compareTo(var11);
    classes.Gamer var20 = new classes.Gamer("hi!", 100);
    java.lang.String var21 = var20.toString();
    int var22 = var20.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    int var26 = var20.compareTo(var25);
    java.lang.String var27 = var25.toString();
    java.lang.String var28 = var25.toString();
    int var29 = var25.getScore();
    java.lang.String var30 = var25.toString();
    int var31 = var2.compareTo(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var8.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var13.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var16.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var27.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var28.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var30.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    classes.Gamer var2 = new classes.Gamer("Nome: 1\u00BA - 1\u00BA - 1\u00BA -  - -1 - -1 - -90| Pontuacao: 8910", (-11));

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test498");


    classes.Operator var3 = new classes.Operator(1, (-1), 190);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test499");


    classes.Operator var3 = new classes.Operator((-11), 98, (-989));

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test500");


    classes.Gamer var2 = new classes.Gamer("hi!", 100);
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.toString();
    int var5 = var2.getScore();
    java.lang.String var6 = var2.getName();
    classes.Gamer var9 = new classes.Gamer("hi!", 10);
    classes.Gamer var12 = new classes.Gamer("hi!", 100);
    java.lang.String var13 = var12.getName();
    java.lang.String var14 = var12.toString();
    int var15 = var9.compareTo(var12);
    int var16 = var2.compareTo(var12);
    classes.Gamer var19 = new classes.Gamer("hi!", 100);
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = var19.toString();
    int var22 = var19.getScore();
    classes.Gamer var25 = new classes.Gamer("hi!", 100);
    java.lang.String var26 = var25.getName();
    int var27 = var25.getScore();
    int var28 = var19.compareTo(var25);
    java.lang.String var29 = var25.getName();
    int var30 = var12.compareTo(var25);
    int var31 = var25.getScore();
    classes.Gamer var34 = new classes.Gamer("hi!", 100);
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = var34.toString();
    int var37 = var34.getScore();
    java.lang.String var38 = var34.toString();
    java.lang.String var39 = var34.toString();
    int var40 = var25.compareTo(var34);
    int var41 = var34.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var4.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var14.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var21.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var36.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var38.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Nome: hi!| Pontuacao: 100"+ "'", var39.equals("Nome: hi!| Pontuacao: 100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 100);

  }

}
